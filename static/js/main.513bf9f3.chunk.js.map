{"version":3,"sources":["stitches.config.ts","Interactive.tsx","useEventLog.ts","EventLogUI.tsx","Demos.tsx","App.tsx","index.tsx"],"names":["styled","theme","global","stitchesGlobal","createCss","colors","pageBackground","highContrast","lowContrast","red","orange","yellow","green","blueGreen","blue","purple","darkThemeClass","globalStyles","all","margin","border","padding","boxSizing","font","fontWeight","textDecoration","textAlign","color","background","WebkitTapHighlightColor","html","height","body","fontFamily","WebkitFontSmoothing","MozOsxFontSmoothing","fontSize","textSizeAdjust","code","minHeight","backgroundColor","DarkModeButton","onClick","className","as","width","outline","outlineOffset","Link","href","children","target","rel","borderBottom","borderBottomStyle","variants","type","borderBottomWidth","listOfEventListenerTypes","propName","category","calculateTimeSincePreviousEvent","eventLog","nowTime","eventType","i","length","eventTime","lastEventTime","time","undefined","useEventLog","setMoveListeners","preventDefaultOnAll","contextMenuPreventDefault","consoleLogEvents","updateEventLog","useState","eventListeners","useMemo","reduce","eventListenersReduceObj","listenerType","test","toLowerCase","event","eventFromResult","eventFrom","Date","now","preventDefault","console","log","prevState","newState","recentEventOfSameTypeIdx","recentTimeCutoff","Math","max","e","findIndexOfRecentEventOfSameType","includes","recentEvent","newCount","count","timeSincePreviousEvent","timeSincePreviousPointerdown","xCoordinate","round","clientX","yCoordinate","clientY","push","EventLogContainer","overflow","EventLogLine","display","spaceAbove","true","marginTop","InfoType","click","pointer","mouse","touch","key","focus","cancel","determineInfoType","EventLogUI","showTimeSincePreviousEvent","showTimeSincePreviousPointerdown","showEventCoordinates","showPointerEvents","showMouseEvents","showTouchEvents","eventLogEl","useRef","useEffect","current","scrollTop","scrollHeight","eventsToExclude","ref","css","map","idx","arr","DemoContainer","paddingBottom","TestButton","borderColor","TestLinkContainer","TestLink","FormHeader","pointerEvents","TextInput","SubmitInput","ButtonDemo","touchActionNone","webkitTapHighlightColorTransparent","webkitTouchCalloutNone","id","touchAction","WebkitTouchCallout","LinkDemo","draggableFalse","draggable","FormDemo","textInput","submitInput","onSubmit","placeholder","value","AppDiv","maxWidth","H1","justifyContent","marginBottom","InfoP","DemoOptionsContainer","DemoOptionsButton","cursor","OptionsContainer","OptionSectionHeading","OptionItemContainer","OptionLabel","OptionCheckbox","appearance","verticalAlign","marginRight","OptionItemCheckbox","label","checked","update","onChange","App","darkMode","useDarkMode","classNameDark","showDemoOptions","updateShowDemoOptions","updateSetMoveListeners","updatePreventDefaultOnAll","updateTouchActionNone","updateWebkitTapHighlightColorTransparent","userSelectNone","updateUserSelectNone","updateContextMenuPreventDefault","updateWebkitTouchCalloutNone","updateDraggableFalse","updateShowTimeSincePreviousEvent","updateShowTimeSincePreviousPointerdown","updateShowEventCoordinates","updateShowPointerEvents","updateShowMouseEvents","updateShowTouchEvents","updateConsoleLogEvents","demoOptions","document","style","userSelect","webkitUserSelect","toggle","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.513bf9f3.chunk.js","sourcesContent":["import { createCss } from '@stitches/react';\n\nexport const { styled, theme, global: stitchesGlobal } = createCss({\n  theme: {\n    colors: {\n      pageBackground: 'rgb(240,240,240)',\n      highContrast: 'rgb(0,0,0)',\n      lowContrast: 'rgb(128,128,128)',\n      red: 'hsl(0,100%,50%)',\n      orange: 'hsl(30,100%,50%)',\n      yellow: 'hsl(51,100%,40%)',\n      green: 'hsl(120,100%,30%)',\n      blueGreen: 'hsl(180,100%,35%)',\n      blue: 'hsl(240,100%,50%)',\n      purple: 'hsl(270,100%,60%)',\n    },\n  },\n});\n\nexport const darkThemeClass = theme({\n  colors: {\n    pageBackground: 'rgb(32,32,32)',\n    highContrast: 'rgb(192,192,192)',\n    lowContrast: 'rgb(136,136,136)',\n    red: 'hsl(0,100%,50%)',\n    orange: 'hsl(30,90%,50%)',\n    yellow: 'hsl(60,88%,50%)',\n    green: 'hsl(120,85%,42%)',\n    blueGreen: 'hsl(180,100%,50%)',\n    blue: 'hsl(210,100%,60%)',\n    purple: 'hsl(270,85%,60%)',\n  },\n});\n\nexport const globalStyles = stitchesGlobal({\n  'button, input': {\n    all: 'unset',\n  },\n  'body, div, span, a, p, h1, h2, h3, code, button, form, input': {\n    margin: 0,\n    border: 0,\n    padding: 0,\n    boxSizing: 'inherit',\n    font: 'inherit',\n    fontWeight: 'inherit',\n    textDecoration: 'inherit',\n    textAlign: 'inherit',\n    color: 'inherit',\n    background: 'transparent',\n    WebkitTapHighlightColor: 'transparent',\n  },\n  html: {\n    height: '100%',\n  },\n  body: {\n    height: '100%',\n    color: '$highContrast',\n    fontFamily: 'system-ui, Helvetica Neue, sans-serif',\n    WebkitFontSmoothing: 'antialiased',\n    MozOsxFontSmoothing: 'grayscale',\n    fontSize: '16px',\n    boxSizing: 'border-box',\n    textSizeAdjust: 'none',\n  },\n  code: {\n    fontFamily: 'monospace',\n  },\n  '#root': {\n    minHeight: '100%',\n    backgroundColor: '$pageBackground',\n  },\n});\n","import { Interactive } from 'react-interactive';\nimport { SunIcon } from '@modulz/radix-icons';\nimport { styled } from './stitches.config';\n\ninterface InteractiveDarkModeButtonProps {\n  onClick: React.MouseEventHandler<HTMLButtonElement>;\n  className?: string;\n}\nconst InteractiveDarkModeButton: React.VFC<InteractiveDarkModeButtonProps> = ({\n  onClick,\n  className,\n}) => {\n  return (\n    <Interactive as=\"button\" className={className} onClick={onClick}>\n      <SunIcon width=\"30\" height=\"30\" />\n    </Interactive>\n  );\n};\n\nexport const DarkModeButton = styled(InteractiveDarkModeButton, {\n  color: '$highContrast',\n  width: '30px',\n  height: '30px',\n  '&.hover, &.active': {\n    color: '$green',\n  },\n  '&.focusFromKey': {\n    outline: '2px solid $colors$green',\n    outlineOffset: '2px',\n  },\n});\n\ninterface InteractiveLinkProps {\n  href: string;\n  className?: string;\n  children: React.ReactNode;\n}\nconst InteractiveLink: React.VFC<InteractiveLinkProps> = ({\n  href,\n  className,\n  children,\n}) => {\n  return (\n    <Interactive\n      as=\"a\"\n      href={href}\n      className={className}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      {children}\n    </Interactive>\n  );\n};\n\nexport const Link = styled(InteractiveLink, {\n  color: '$highContrast',\n  borderBottom: '2px dotted $colors$green',\n  textDecoration: 'none',\n  '&.hover, &.active': {\n    borderBottomStyle: 'solid',\n  },\n  '&.focusFromKey': {\n    outline: '2px solid $colors$green',\n    outlineOffset: '2px',\n  },\n  variants: {\n    type: {\n      lowContrast: {\n        color: '$lowContrast',\n        fontSize: '14px',\n        borderBottomWidth: '1px',\n        '&.hover, &.active': {\n          color: '$highContrast',\n        },\n      },\n    },\n  },\n});\n","import React, { useState, useMemo } from 'react';\nimport { eventFrom, EventFromInput } from 'event-from';\n\nexport type EventCategory =\n  | 'click'\n  | 'mouse'\n  | 'pointer'\n  | 'touch'\n  | 'key'\n  | 'focus'\n  | 'drag'\n  | 'wheel'\n  | 'scroll'\n  | 'select'\n  | 'contextMenu';\n\nconst listOfEventListenerTypes: {\n  propName: string;\n  category: EventCategory;\n}[] = [\n  // click events\n  { propName: 'onClick', category: 'click' },\n  { propName: 'onDoubleClick', category: 'click' },\n  // pointer events\n  { propName: 'onPointerEnter', category: 'pointer' },\n  { propName: 'onPointerLeave', category: 'pointer' },\n  { propName: 'onPointerOver', category: 'pointer' },\n  { propName: 'onPointerOut', category: 'pointer' },\n  { propName: 'onPointerDown', category: 'pointer' },\n  { propName: 'onPointerUp', category: 'pointer' },\n  { propName: 'onPointerMove', category: 'pointer' },\n  { propName: 'onGotPointerCapture', category: 'pointer' },\n  { propName: 'onLostPointerCapture', category: 'pointer' },\n  { propName: 'onPointerCancel', category: 'pointer' },\n  // mouse events\n  { propName: 'onMouseEnter', category: 'mouse' },\n  { propName: 'onMouseLeave', category: 'mouse' },\n  { propName: 'onMouseOver', category: 'mouse' },\n  { propName: 'onMouseOut', category: 'mouse' },\n  { propName: 'onMouseDown', category: 'mouse' },\n  { propName: 'onMouseUp', category: 'mouse' },\n  { propName: 'onMouseMove', category: 'mouse' },\n  // touch events\n  { propName: 'onTouchStart', category: 'touch' },\n  { propName: 'onTouchMove', category: 'touch' },\n  { propName: 'onTouchEnd', category: 'touch' },\n  { propName: 'onTouchCancel', category: 'touch' },\n  // key events\n  { propName: 'onKeyDown', category: 'key' },\n  { propName: 'onKeyUp', category: 'key' },\n  // focus events\n  { propName: 'onFocus', category: 'focus' },\n  { propName: 'onBlur', category: 'focus' },\n  // drag events\n  { propName: 'onDragStart', category: 'drag' },\n  { propName: 'onDrag', category: 'drag' },\n  { propName: 'onDragEnd', category: 'drag' },\n  // wheel and scroll events not fully supported by eventFrom\n  // // wheel event\n  // { propName: 'onWheel', category: 'wheel' },\n  // // scroll event\n  // { propName: 'onScroll', category: 'scroll' },\n  // select event\n  { propName: 'onSelect', category: 'select' },\n  // context menu\n  { propName: 'onContextMenu', category: 'contextMenu' },\n];\n\ninterface FindIndexOfRecentEventOfSameType {\n  (arg: {\n    eventLog: EventLogItem[];\n    type: string;\n    eventFrom: EventFromInput;\n    nowTime: number;\n    recentTimeCutoff: number;\n  }): number | undefined;\n}\n\nconst findIndexOfRecentEventOfSameType: FindIndexOfRecentEventOfSameType = ({\n  eventLog,\n  type,\n  eventFrom,\n  nowTime,\n  recentTimeCutoff,\n}) => {\n  for (\n    let i = eventLog.length - 1;\n    i >= Math.max(eventLog.length - 2, 0);\n    i--\n  ) {\n    const e = eventLog[i];\n    const eventTime = e.lastEventTime || e.time;\n\n    if (\n      e.type === type &&\n      e.eventFrom === eventFrom &&\n      eventTime &&\n      nowTime - eventTime <= recentTimeCutoff\n    )\n      return i;\n  }\n};\n\ninterface CalculateTimeSincePreviousEvent {\n  (arg: { eventLog: EventLogItem[]; nowTime: number; eventType?: string }):\n    | number\n    | undefined;\n}\n\nconst calculateTimeSincePreviousEvent: CalculateTimeSincePreviousEvent = ({\n  eventLog,\n  nowTime,\n  eventType,\n}) => {\n  for (let i = eventLog.length - 1; i >= 0; i--) {\n    if (eventType && eventType !== eventLog[i].type) {\n      continue;\n    }\n    const eventTime = eventLog[i].lastEventTime || eventLog[i].time;\n    if (eventTime !== undefined) {\n      return nowTime - eventTime;\n    }\n  }\n  return undefined;\n};\n\nexport interface EventLogItem {\n  category: EventCategory;\n  type: string;\n  eventFrom: EventFromInput;\n  time?: number;\n  lastEventTime?: number; // used when counting multiple events of the same time, e.g. mousemove\n  timeSincePreviousEvent?: number;\n  timeSincePreviousPointerdown?: number;\n  xCoordinate?: number;\n  yCoordinate?: number;\n  target?: any;\n  count?: number;\n}\n\ninterface EventListener {\n  [key: string]: React.EventHandler<any>;\n}\n\ninterface UseEventLog {\n  (options: {\n    setMoveListeners?: boolean;\n    preventDefaultOnAll: boolean;\n    contextMenuPreventDefault: boolean;\n    consoleLogEvents: boolean;\n  }): {\n    eventLog: EventLogItem[];\n    eventListeners: EventListener;\n  };\n}\n\nexport const useEventLog: UseEventLog = ({\n  setMoveListeners,\n  preventDefaultOnAll,\n  contextMenuPreventDefault,\n  consoleLogEvents,\n}) => {\n  const [eventLog, updateEventLog] = useState<EventLogItem[]>([]);\n\n  const eventListeners = useMemo(\n    () =>\n      listOfEventListenerTypes.reduce(\n        (eventListenersReduceObj: EventListener, listenerType) => {\n          if (\n            !setMoveListeners &&\n            /move/.test(listenerType.propName.toLowerCase())\n          ) {\n            return eventListenersReduceObj;\n          }\n\n          eventListenersReduceObj[listenerType.propName] = (event) => {\n            const eventFromResult = eventFrom(event);\n            const nowTime = Date.now();\n\n            if (\n              preventDefaultOnAll ||\n              (contextMenuPreventDefault && event.type === 'contextmenu')\n            ) {\n              event.preventDefault();\n            }\n\n            if (consoleLogEvents) {\n              console.log(event, `eventFrom: ${eventFromResult}`);\n            }\n\n            updateEventLog((prevState) => {\n              const newState = [...prevState];\n              const recentEventOfSameTypeIdx = findIndexOfRecentEventOfSameType(\n                {\n                  eventLog: newState,\n                  type: event.type,\n                  eventFrom: eventFromResult,\n                  nowTime,\n                  recentTimeCutoff: 1000,\n                },\n              );\n\n              if (\n                [\n                  'click',\n                  'mousemove',\n                  'pointermove',\n                  'touchmove',\n                  'keydown',\n                  'keyup',\n                  'drag',\n                  'scroll',\n                  'wheel',\n                ].includes(event.type) &&\n                recentEventOfSameTypeIdx !== undefined\n              ) {\n                const recentEvent = newState[recentEventOfSameTypeIdx];\n                const newCount = recentEvent.count ? recentEvent.count + 1 : 2;\n                newState[recentEventOfSameTypeIdx] = {\n                  category: listenerType.category,\n                  type: event.type,\n                  eventFrom: eventFromResult,\n                  time: recentEvent.time,\n                  lastEventTime: nowTime,\n                  timeSincePreviousEvent: recentEvent.timeSincePreviousEvent,\n                  timeSincePreviousPointerdown:\n                    recentEvent.timeSincePreviousPointerdown,\n                  xCoordinate: Math.round(event.clientX),\n                  yCoordinate: Math.round(event.clientY),\n                  target: event.target,\n                  count: newCount,\n                };\n              } else {\n                newState.push({\n                  category: listenerType.category,\n                  type: event.type,\n                  eventFrom: eventFromResult,\n                  time: nowTime,\n                  timeSincePreviousEvent: calculateTimeSincePreviousEvent({\n                    eventLog: newState,\n                    nowTime,\n                  }),\n                  timeSincePreviousPointerdown: calculateTimeSincePreviousEvent(\n                    {\n                      eventLog: newState,\n                      eventType: 'pointerdown',\n                      nowTime,\n                    },\n                  ),\n                  xCoordinate: Math.round(event.clientX),\n                  yCoordinate: Math.round(event.clientY),\n                  target: event.target,\n                });\n              }\n\n              return newState;\n            });\n          };\n          return eventListenersReduceObj;\n        },\n        {},\n      ),\n    [\n      setMoveListeners,\n      preventDefaultOnAll,\n      contextMenuPreventDefault,\n      consoleLogEvents,\n    ],\n  );\n\n  return { eventLog, eventListeners };\n};\n","import { useEffect, useRef } from 'react';\nimport { EventLogItem } from './useEventLog';\nimport { EventCategory } from './useEventLog';\nimport { styled } from './stitches.config';\n\nconst EventLogContainer = styled('div', {\n  height: '300px',\n  padding: '0 5px',\n  border: '1px solid $colors$highContrast',\n  overflow: 'scroll',\n});\n\nconst EventLogLine = styled('code', {\n  display: 'block',\n  variants: {\n    spaceAbove: {\n      true: {\n        marginTop: '20px',\n      },\n    },\n  },\n});\n\nconst InfoType = styled('span', {\n  variants: {\n    type: {\n      click: { color: '$blue' },\n      pointer: { color: '$green' },\n      mouse: { color: '$purple' },\n      touch: { color: '$orange' },\n      key: { color: '$yellow' },\n      focus: { color: '$blueGreen' },\n      cancel: { color: '$red' },\n      lowContrast: { color: '$lowContrast' },\n    },\n  },\n});\n\nconst determineInfoType = (category: EventCategory, type: string) => {\n  if (type === 'pointercancel' || type === 'touchcancel') return 'cancel';\n  switch (category) {\n    case 'click':\n      return category;\n    case 'pointer':\n      return category;\n    case 'mouse':\n      return category;\n    case 'touch':\n      return category;\n    case 'key':\n      return category;\n    case 'focus':\n      return category;\n    default:\n      return undefined;\n  }\n};\n\ninterface EventLogUIProps {\n  eventLog: EventLogItem[];\n  showTimeSincePreviousEvent: boolean;\n  showTimeSincePreviousPointerdown: boolean;\n  showEventCoordinates: boolean;\n  showPointerEvents: boolean;\n  showMouseEvents: boolean;\n  showTouchEvents: boolean;\n  height?: string;\n}\n\nexport const EventLogUI: React.VFC<EventLogUIProps> = ({\n  eventLog,\n  showTimeSincePreviousEvent,\n  showTimeSincePreviousPointerdown,\n  showEventCoordinates,\n  showPointerEvents,\n  showMouseEvents,\n  showTouchEvents,\n  height,\n}) => {\n  const eventLogEl = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (eventLogEl && eventLogEl.current) {\n      eventLogEl.current.scrollTop = eventLogEl.current.scrollHeight;\n    }\n  });\n\n  const eventsToExclude: string[] = [];\n  if (!showPointerEvents) eventsToExclude.push('pointer');\n  if (!showMouseEvents) eventsToExclude.push('mouse');\n  if (!showTouchEvents) eventsToExclude.push('touch');\n\n  return (\n    <EventLogContainer ref={eventLogEl} css={{ height }}>\n      {eventLog.map(\n        (\n          {\n            category,\n            type,\n            count,\n            eventFrom,\n            time,\n            timeSincePreviousEvent,\n            timeSincePreviousPointerdown,\n            xCoordinate,\n            yCoordinate,\n          },\n          idx,\n          arr,\n        ) =>\n          eventsToExclude.includes(category) ? null : (\n            <EventLogLine\n              key={`${idx}${type}${count}`}\n              spaceAbove={\n                timeSincePreviousEvent !== undefined &&\n                timeSincePreviousEvent > 1000\n              }\n            >\n              <InfoType type=\"lowContrast\">{idx}</InfoType>{' '}\n              <InfoType type={determineInfoType(category, type)}>\n                {type}\n                {count ? ` (${count})` : ''}\n              </InfoType>{' '}\n              eventFrom <InfoType type={eventFrom}>{eventFrom}</InfoType>\n              {showTimeSincePreviousEvent &&\n                timeSincePreviousEvent !== undefined && (\n                  <span>, {timeSincePreviousEvent}ms</span>\n                )}\n              {showTimeSincePreviousPointerdown &&\n                timeSincePreviousPointerdown !== undefined && (\n                  <span>, {timeSincePreviousPointerdown}ms_pointerdown</span>\n                )}\n              {showEventCoordinates && (\n                <span>\n                  , x:{xCoordinate}, y:{yCoordinate}\n                </span>\n              )}\n            </EventLogLine>\n          ),\n      )}\n    </EventLogContainer>\n  );\n};\n","import { useMemo } from 'react';\nimport { styled } from './stitches.config';\n\nimport { useEventLog } from './useEventLog';\nimport { EventLogUI } from './EventLogUI';\nimport { DemoOptionsInterface } from './App';\n\nconst DemoContainer = styled('div', {\n  paddingBottom: '20px',\n  margin: '20px 0',\n  borderBottom: '1px dotted $colors$lowContrast',\n});\n\nconst TestButton = styled('button', {\n  display: 'block',\n  width: '100%',\n  height: '70px',\n  margin: '10px 0',\n  fontSize: '24px',\n  textAlign: 'center',\n  color: '$highContrast',\n  border: '1px solid $colors$highContrast',\n  '&:hover, &:active': {\n    color: '$green',\n    borderColor: '$green',\n  },\n  '&:focus': {\n    outline: '2px solid $colors$green',\n    outlineOffset: '2px',\n  },\n});\n\nconst TestLinkContainer = styled('div', {\n  margin: '10px 0',\n});\n\nconst TestLink = styled('a', {\n  fontSize: '24px',\n  '&:hover, &:active': {\n    color: '$green',\n    borderColor: '$green',\n  },\n  '&:focus': {\n    outline: '2px solid $colors$green',\n    outlineOffset: '2px',\n  },\n});\n\nconst ScrollableContainer = styled('div', {\n  margin: '10px 0',\n  height: '100px',\n  padding: '0 5px',\n  border: '1px solid $colors$highContrast',\n  overflow: 'scroll',\n});\n\nconst ScrollableItem = styled('div', {\n  pointerEvents: 'none',\n});\n\nconst FormHeader = styled('h3', {\n  fontSize: '14px',\n  margin: '12px 0 2px',\n  color: '$lowContrast',\n});\n\nconst TextInput = styled('input', {\n  width: '100%',\n  fontSize: '24px',\n  border: '1px solid $colors$highContrast',\n  padding: '2px 4px',\n  '&:hover, &:active': {\n    color: '$green',\n    borderColor: '$green',\n  },\n  '&:focus': {\n    outline: '2px solid $colors$green',\n    outlineOffset: '-1px',\n  },\n});\n\nconst SubmitInput = styled('input', {\n  display: 'block',\n  width: '100%',\n  height: '44px',\n  margin: '10px 0',\n  fontSize: '24px',\n  textAlign: 'center',\n  color: '$highContrast',\n  border: '1px solid $colors$highContrast',\n  '&:hover, &:active': {\n    color: '$green',\n    borderColor: '$green',\n  },\n  '&:focus': {\n    outline: '2px solid $colors$green',\n    outlineOffset: '2px',\n  },\n});\n\nexport const ButtonDemo: React.VFC<DemoOptionsInterface> = ({\n  setMoveListeners,\n  preventDefaultOnAll,\n  touchActionNone,\n  webkitTapHighlightColorTransparent,\n  // userSelectNone,\n  webkitTouchCalloutNone,\n  contextMenuPreventDefault,\n  // draggableFalse,\n  showTimeSincePreviousEvent,\n  showEventCoordinates,\n  showPointerEvents,\n  showMouseEvents,\n  showTouchEvents,\n  showTimeSincePreviousPointerdown,\n  consoleLogEvents,\n}) => {\n  const { eventLog, eventListeners } = useEventLog({\n    setMoveListeners,\n    preventDefaultOnAll,\n    contextMenuPreventDefault,\n    consoleLogEvents,\n  });\n  return (\n    <DemoContainer id=\"button-demo\">\n      <TestButton\n        {...eventListeners}\n        css={{\n          touchAction: touchActionNone ? 'none' : undefined,\n          WebkitTapHighlightColor: webkitTapHighlightColorTransparent\n            ? 'transparent'\n            : undefined,\n          WebkitTouchCallout: webkitTouchCalloutNone ? 'none' : undefined,\n        }}\n      >\n        Test Button\n      </TestButton>\n      <EventLogUI\n        eventLog={eventLog}\n        showTimeSincePreviousEvent={showTimeSincePreviousEvent}\n        showTimeSincePreviousPointerdown={showTimeSincePreviousPointerdown}\n        showEventCoordinates={showEventCoordinates}\n        showPointerEvents={showPointerEvents}\n        showMouseEvents={showMouseEvents}\n        showTouchEvents={showTouchEvents}\n      />\n    </DemoContainer>\n  );\n};\n\nexport const LinkDemo: React.VFC<DemoOptionsInterface> = ({\n  setMoveListeners,\n  preventDefaultOnAll,\n  touchActionNone,\n  webkitTapHighlightColorTransparent,\n  // userSelectNone,\n  webkitTouchCalloutNone,\n  contextMenuPreventDefault,\n  draggableFalse,\n  showTimeSincePreviousEvent,\n  showEventCoordinates,\n  showPointerEvents,\n  showMouseEvents,\n  showTouchEvents,\n  showTimeSincePreviousPointerdown,\n  consoleLogEvents,\n}) => {\n  const { eventLog, eventListeners } = useEventLog({\n    setMoveListeners,\n    preventDefaultOnAll,\n    contextMenuPreventDefault,\n    consoleLogEvents,\n  });\n  return (\n    <DemoContainer id=\"link-demo\">\n      <TestLinkContainer>\n        <TestLink\n          {...eventListeners}\n          href=\"#link-demo\"\n          draggable={draggableFalse ? false : undefined}\n          css={{\n            touchAction: touchActionNone ? 'none' : undefined,\n            WebkitTapHighlightColor: webkitTapHighlightColorTransparent\n              ? 'transparent'\n              : undefined,\n            WebkitTouchCallout: webkitTouchCalloutNone ? 'none' : undefined,\n          }}\n        >\n          Test link with href=\"#link-demo\"\n        </TestLink>\n      </TestLinkContainer>\n      <EventLogUI\n        eventLog={eventLog}\n        showTimeSincePreviousEvent={showTimeSincePreviousEvent}\n        showTimeSincePreviousPointerdown={showTimeSincePreviousPointerdown}\n        showEventCoordinates={showEventCoordinates}\n        showPointerEvents={showPointerEvents}\n        showMouseEvents={showMouseEvents}\n        showTouchEvents={showTouchEvents}\n      />\n    </DemoContainer>\n  );\n};\n\nexport const ScrollableDemo: React.VFC<DemoOptionsInterface> = ({\n  setMoveListeners,\n  preventDefaultOnAll,\n  touchActionNone,\n  webkitTapHighlightColorTransparent,\n  // userSelectNone,\n  webkitTouchCalloutNone,\n  contextMenuPreventDefault,\n  // draggableFalse,\n  showTimeSincePreviousEvent,\n  showEventCoordinates,\n  showPointerEvents,\n  showMouseEvents,\n  showTouchEvents,\n  showTimeSincePreviousPointerdown,\n  consoleLogEvents,\n}) => {\n  const { eventLog, eventListeners } = useEventLog({\n    setMoveListeners,\n    preventDefaultOnAll,\n    contextMenuPreventDefault,\n    consoleLogEvents,\n  });\n  return (\n    <DemoContainer id=\"scrollable-demo\">\n      <ScrollableContainer\n        {...eventListeners}\n        css={{\n          touchAction: touchActionNone ? 'none' : undefined,\n          WebkitTapHighlightColor: webkitTapHighlightColorTransparent\n            ? 'transparent'\n            : undefined,\n          WebkitTouchCallout: webkitTouchCalloutNone ? 'none' : undefined,\n        }}\n      >\n        {useMemo(\n          () =>\n            Array(100)\n              .fill(1)\n              .map((_, idx) => (\n                <ScrollableItem key={idx}>{idx} scroll me</ScrollableItem>\n              )),\n          [],\n        )}\n      </ScrollableContainer>\n      <EventLogUI\n        eventLog={eventLog}\n        showTimeSincePreviousEvent={showTimeSincePreviousEvent}\n        showTimeSincePreviousPointerdown={showTimeSincePreviousPointerdown}\n        showEventCoordinates={showEventCoordinates}\n        showPointerEvents={showPointerEvents}\n        showMouseEvents={showMouseEvents}\n        showTouchEvents={showTouchEvents}\n      />\n    </DemoContainer>\n  );\n};\n\nexport const FormDemo: React.VFC<DemoOptionsInterface> = ({\n  setMoveListeners,\n  preventDefaultOnAll,\n  touchActionNone,\n  webkitTapHighlightColorTransparent,\n  // userSelectNone,\n  webkitTouchCalloutNone,\n  contextMenuPreventDefault,\n  // draggableFalse,\n  showTimeSincePreviousEvent,\n  showEventCoordinates,\n  showPointerEvents,\n  showMouseEvents,\n  showTouchEvents,\n  showTimeSincePreviousPointerdown,\n  consoleLogEvents,\n}) => {\n  const textInput = useEventLog({\n    setMoveListeners,\n    preventDefaultOnAll,\n    contextMenuPreventDefault,\n    consoleLogEvents,\n  });\n  const submitInput = useEventLog({\n    setMoveListeners,\n    preventDefaultOnAll,\n    contextMenuPreventDefault,\n    consoleLogEvents,\n  });\n  return (\n    <DemoContainer id=\"form-demo\">\n      <form onSubmit={(e) => e.preventDefault()}>\n        <TextInput\n          {...textInput.eventListeners}\n          type=\"text\"\n          placeholder=\"Form demo\"\n          css={{\n            touchAction: touchActionNone ? 'none' : undefined,\n            WebkitTapHighlightColor: webkitTapHighlightColorTransparent\n              ? 'transparent'\n              : undefined,\n            WebkitTouchCallout: webkitTouchCalloutNone ? 'none' : undefined,\n          }}\n        />\n        <SubmitInput\n          {...submitInput.eventListeners}\n          type=\"submit\"\n          value=\"Submit\"\n          css={{\n            touchAction: touchActionNone ? 'none' : undefined,\n            WebkitTapHighlightColor: webkitTapHighlightColorTransparent\n              ? 'transparent'\n              : undefined,\n            WebkitTouchCallout: webkitTouchCalloutNone ? 'none' : undefined,\n          }}\n        />\n      </form>\n      <FormHeader>Text input event log</FormHeader>\n      <EventLogUI\n        eventLog={textInput.eventLog}\n        height=\"150px\"\n        showTimeSincePreviousEvent={showTimeSincePreviousEvent}\n        showTimeSincePreviousPointerdown={showTimeSincePreviousPointerdown}\n        showEventCoordinates={showEventCoordinates}\n        showPointerEvents={showPointerEvents}\n        showMouseEvents={showMouseEvents}\n        showTouchEvents={showTouchEvents}\n      />\n      <FormHeader>Submit input event log</FormHeader>\n      <EventLogUI\n        eventLog={submitInput.eventLog}\n        height=\"150px\"\n        showTimeSincePreviousEvent={showTimeSincePreviousEvent}\n        showTimeSincePreviousPointerdown={showTimeSincePreviousPointerdown}\n        showEventCoordinates={showEventCoordinates}\n        showPointerEvents={showPointerEvents}\n        showMouseEvents={showMouseEvents}\n        showTouchEvents={showTouchEvents}\n      />\n    </DemoContainer>\n  );\n};\n","import { useState, useMemo } from 'react';\nimport useDarkMode from 'use-dark-mode';\nimport { styled, globalStyles, darkThemeClass } from './stitches.config';\nimport { Link, DarkModeButton } from './Interactive';\nimport {\n  ButtonDemo,\n  LinkDemo,\n  // ScrollableDemo,\n  FormDemo,\n} from './Demos';\n\nconst AppDiv = styled('div', {\n  maxWidth: '700px',\n  padding: '14px 15px 25px',\n  margin: '0 auto',\n});\n\nconst H1 = styled('h1', {\n  fontSize: '26px',\n  display: 'flex',\n  justifyContent: 'space-between',\n  marginBottom: '2px',\n});\n\nconst InfoP = styled('p', {\n  padding: '10px 0',\n  borderBottom: '1px dotted $colors$lowContrast',\n});\n\nconst DemoOptionsContainer = styled('div', {\n  borderBottom: '1px dotted $colors$lowContrast',\n});\n\nconst DemoOptionsButton = styled('button', {\n  cursor: 'pointer',\n  WebkitTapHighlightColor: 'transparent',\n  display: 'block',\n  margin: '10px 0',\n  fontSize: '20px',\n  color: '$highContrast',\n  '&:hover, &:active': {\n    color: '$green',\n    borderColor: '$green',\n  },\n  '&:focus': {\n    outline: '2px solid $colors$green',\n    outlineOffset: '2px',\n  },\n});\n\nconst OptionsContainer = styled('div', {\n  paddingBottom: '6px',\n});\n\nconst OptionSectionHeading = styled('div', {\n  margin: '14px 0 6px',\n});\n\nconst OptionItemContainer = styled('div', {\n  margin: '4px 0',\n});\n\nconst OptionLabel = styled('label', {\n  cursor: 'pointer',\n  WebkitTapHighlightColor: 'transparent',\n});\n\nconst OptionCheckbox = styled('input', {\n  appearance: 'checkbox',\n  verticalAlign: 'middle',\n  marginRight: '4px',\n  '&:focus': {\n    outline: '2px solid $colors$green',\n    outlineOffset: '1px',\n  },\n});\n\ninterface OptionItemCheckboxProps {\n  label: React.ReactNode;\n  checked: boolean;\n  update: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst OptionItemCheckbox: React.VFC<OptionItemCheckboxProps> = ({\n  label,\n  checked,\n  update,\n}) => (\n  <OptionItemContainer>\n    <OptionLabel>\n      <OptionCheckbox\n        type=\"checkbox\"\n        checked={checked}\n        onChange={() => update((prevState) => !prevState)}\n      />\n      {label}\n    </OptionLabel>\n  </OptionItemContainer>\n);\n\nexport interface DemoOptionsInterface {\n  setMoveListeners: boolean;\n  preventDefaultOnAll: boolean;\n  touchActionNone: boolean;\n  webkitTapHighlightColorTransparent: boolean;\n  userSelectNone: boolean;\n  webkitTouchCalloutNone: boolean;\n  contextMenuPreventDefault: boolean;\n  draggableFalse: boolean;\n  showTimeSincePreviousEvent: boolean;\n  showEventCoordinates: boolean;\n  showPointerEvents: boolean;\n  showMouseEvents: boolean;\n  showTouchEvents: boolean;\n  showTimeSincePreviousPointerdown: boolean;\n  consoleLogEvents: boolean;\n}\n\nexport const App = () => {\n  globalStyles();\n\n  const darkMode = useDarkMode(undefined, {\n    classNameDark: darkThemeClass,\n  });\n\n  const [showDemoOptions, updateShowDemoOptions] = useState(false);\n\n  // options\n  const [setMoveListeners, updateSetMoveListeners] = useState(true);\n  const [preventDefaultOnAll, updatePreventDefaultOnAll] = useState(false);\n  const [touchActionNone, updateTouchActionNone] = useState(false);\n  const [\n    webkitTapHighlightColorTransparent,\n    updateWebkitTapHighlightColorTransparent,\n  ] = useState(true);\n\n  // options to enable long press on touch devices\n  const [userSelectNone, updateUserSelectNone] = useState(false);\n  const [contextMenuPreventDefault, updateContextMenuPreventDefault] = useState(\n    false,\n  );\n  const [webkitTouchCalloutNone, updateWebkitTouchCalloutNone] = useState(\n    false,\n  );\n  const [draggableFalse, updateDraggableFalse] = useState(false);\n\n  // event log options\n  const [\n    showTimeSincePreviousEvent,\n    updateShowTimeSincePreviousEvent,\n  ] = useState(true);\n  const [\n    showTimeSincePreviousPointerdown,\n    updateShowTimeSincePreviousPointerdown,\n  ] = useState(false);\n  const [showEventCoordinates, updateShowEventCoordinates] = useState(false);\n  const [showPointerEvents, updateShowPointerEvents] = useState(true);\n  const [showMouseEvents, updateShowMouseEvents] = useState(true);\n  const [showTouchEvents, updateShowTouchEvents] = useState(true);\n  const [consoleLogEvents, updateConsoleLogEvents] = useState(false);\n\n  const demoOptions: DemoOptionsInterface = {\n    setMoveListeners,\n    preventDefaultOnAll,\n    touchActionNone,\n    webkitTapHighlightColorTransparent,\n    userSelectNone,\n    webkitTouchCalloutNone,\n    contextMenuPreventDefault,\n    draggableFalse,\n    showTimeSincePreviousEvent,\n    showEventCoordinates,\n    showPointerEvents,\n    showMouseEvents,\n    showTouchEvents,\n    showTimeSincePreviousPointerdown,\n    consoleLogEvents,\n  };\n\n  // set user-select: none on the body when userSelectNone is enabled\n  useMemo(() => {\n    document.body.style.userSelect = userSelectNone ? 'none' : '';\n    document.body.style.webkitUserSelect = userSelectNone ? 'none' : '';\n  }, [userSelectNone]);\n\n  return (\n    <AppDiv>\n      <H1 className={undefined}>\n        <span>Event From Demo</span>\n        <DarkModeButton onClick={darkMode.toggle} />\n      </H1>\n      <Link type=\"lowContrast\" href=\"https://github.com/rafgraph/event-from\">\n        https://github.com/rafgraph/event-from\n      </Link>\n      <InfoP>\n        A collection of buttons, links, etc with event listeners and logs to\n        demonstrate <code>eventFrom</code>.\n      </InfoP>\n      <DemoOptionsContainer>\n        <DemoOptionsButton\n          onClick={() => updateShowDemoOptions(!showDemoOptions)}\n        >\n          Demo options - {`${showDemoOptions ? 'hide' : 'show'}`}\n        </DemoOptionsButton>\n        {showDemoOptions && (\n          <OptionsContainer>\n            <OptionItemCheckbox\n              label={\n                <>\n                  Set <code>move</code> event listeners in demo\n                </>\n              }\n              checked={setMoveListeners}\n              update={updateSetMoveListeners}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  Call <code>preventDefault()</code> on all events in demo\n                </>\n              }\n              checked={preventDefaultOnAll}\n              update={updatePreventDefaultOnAll}\n            />\n            <OptionItemCheckbox\n              label={<code>touch-action: none</code>}\n              checked={touchActionNone}\n              update={updateTouchActionNone}\n            />\n            <OptionItemCheckbox\n              label={<code>-webkit-tap-highlight-color: transparent</code>}\n              checked={webkitTapHighlightColorTransparent}\n              update={updateWebkitTapHighlightColorTransparent}\n            />\n            <OptionSectionHeading>\n              Options to enable long press on touch devices:\n            </OptionSectionHeading>\n            <OptionItemCheckbox\n              label={\n                <>\n                  <code>user-select: none</code>, set on the{' '}\n                  <code>{'<body>'}</code>, iOS on long press attempts to select\n                  nearby text even if the target element has set this to{' '}\n                  <code>none</code>, so need to set it on the body.\n                </>\n              }\n              checked={userSelectNone}\n              update={updateUserSelectNone}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  <code>contextmenu</code> event <code>preventDefault()</code>,\n                  to prevent the context menu from appearing on long press of\n                  links.\n                </>\n              }\n              checked={contextMenuPreventDefault}\n              update={updateContextMenuPreventDefault}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  <code>-webkit-touch-callout: none</code>, to prevent the\n                  \"context menu\" from appearing on iOS long press of links\n                  because iOS doesn't support <code>conextmenu</code> events.\n                </>\n              }\n              checked={webkitTouchCalloutNone}\n              update={updateWebkitTouchCalloutNone}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  <code>draggable=\"false\"</code>, to prevent from dragging links\n                  on long press on iPadOS.\n                </>\n              }\n              checked={draggableFalse}\n              update={updateDraggableFalse}\n            />\n            <OptionSectionHeading>Event log options:</OptionSectionHeading>\n            <OptionItemCheckbox\n              label={'show time (ms) since previous event'}\n              checked={showTimeSincePreviousEvent}\n              update={updateShowTimeSincePreviousEvent}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  show time (ms) since previous <code>pointerdown</code> event\n                </>\n              }\n              checked={showTimeSincePreviousPointerdown}\n              update={updateShowTimeSincePreviousPointerdown}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  show event coordinates: <code>clientX</code>,{' '}\n                  <code>clientY</code>\n                </>\n              }\n              checked={showEventCoordinates}\n              update={updateShowEventCoordinates}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  show <code>pointer</code> events\n                </>\n              }\n              checked={showPointerEvents}\n              update={updateShowPointerEvents}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  show <code>mouse</code> events\n                </>\n              }\n              checked={showMouseEvents}\n              update={updateShowMouseEvents}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  show <code>touch</code> events\n                </>\n              }\n              checked={showTouchEvents}\n              update={updateShowTouchEvents}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  <code>console.log</code> all events\n                </>\n              }\n              checked={consoleLogEvents}\n              update={updateConsoleLogEvents}\n            />\n          </OptionsContainer>\n        )}\n      </DemoOptionsContainer>\n\n      <ButtonDemo {...demoOptions} />\n      <LinkDemo {...demoOptions} />\n      {/* scroll events not fully supported by eventFrom */}\n      {/* <ScrollableDemo {...demoOptions} /> */}\n      <FormDemo {...demoOptions} />\n    </AppDiv>\n  );\n};\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}