{"version":3,"sources":["stitches.config.ts","Interactive.tsx","useEventLog.ts","EventLogUI.tsx","Demos.tsx","App.tsx","index.tsx"],"names":["stitchesConfig","createCss","theme","colors","pageBackground","backgroundContrast","highContrast","lowContrast","red","orange","yellow","green","blueGreen","blue","purple","styled","global","createGlobalCss","darkThemeClass","globalCss","button","all","margin","border","padding","boxSizing","font","fontWeight","textDecoration","textAlign","color","background","html","height","body","fontFamily","WebkitFontSmoothing","MozOsxFontSmoothing","fontSize","textSizeAdjust","code","minHeight","backgroundColor","ButtonBase","onClick","className","children","as","WebkitTapHighlightColor","outline","outlineOffset","CheckboxBase","checked","onCheckedChange","disabled","Interactive","CheckIcon","appearance","boxShadow","width","borderRadius","display","alignItems","justifyContent","Link","href","target","rel","borderBottom","borderBottomStyle","variants","type","DarkModeButton","listOfEventListenerTypes","propName","category","calculateTimeSincePreviousEvent","eventLog","nowTime","eventType","i","length","eventTime","lastEventTime","time","undefined","useEventLog","setMoveListeners","preventDefaultOnAll","contextMenuPreventDefault","consoleLogEvents","useContext","OptionsContext","updateEventLog","useState","eventListeners","useMemo","reduce","eventListenersReduceObj","listenerType","test","toLowerCase","event","eventFromResult","eventFrom","Date","now","preventDefault","console","log","prevState","newState","recentEventOfSameTypeIdx","recentTimeCutoff","Math","max","e","findIndexOfRecentEventOfSameType","includes","recentEvent","newCount","count","timeSincePreviousEvent","timeSincePreviousPointerdown","xCoordinate","round","clientX","yCoordinate","clientY","push","EventLogContainer","overflow","EventLogLine","spaceAbove","true","marginTop","InfoType","click","pointer","mouse","touch","key","focus","cancel","determineInfoType","EventLogUI","showTimeSincePreviousEvent","showTimeSincePreviousPointerdown","showEventCoordinates","showPointerEvents","showMouseEvents","showTouchEvents","eventLogEl","useRef","useEffect","current","scrollTop","scrollHeight","eventsToExclude","ref","css","map","idx","DemoContainer","paddingBottom","DemoButtonSharedStyle","DemoButtonInteractive","props","borderColor","DemoButtonRegular","DemoLinkContainer","DemoLinkSharedStyle","DemoLinkInteractive","DemoLinkRegular","FormHeader","pointerEvents","DemoTextInputSharedStyle","DemoTextInputInteractive","DemoTextInputRegular","DemoSubmitInputSharedStyle","DemoSubmitInputInteractive","DemoSubmitInputRegular","ButtonDemo","useReactInteractive","riUseExtendedTouchActive","touchActionNone","webkitTapHighlightColorTransparent","webkitTouchCalloutNone","id","useExtendedTouchActive","touchAction","WebkitTouchCallout","LinkDemo","draggableFalse","draggable","FormDemo","textInput","submitInput","onSubmit","placeholder","value","AppDiv","maxWidth","H1","marginBottom","InfoContainer","DemoOptionsContainer","DemoOptionsButton","OptionsContainer","OptionSectionHeading","OptionItemContainer","OptionLabel","Label","cursor","opacity","OptionCheckbox","verticalAlign","marginRight","OptionItemCheckbox","label","setChecked","createContext","userSelectNone","App","darkMode","useDarkMode","classNameDark","showDemoOptions","updateShowDemoOptions","updateUseReactInteractive","updateSetMoveListeners","updatePreventDefaultOnAll","updateTouchActionNone","updateWebkitTapHighlightColorTransparent","updateInteractiveUseExtendedTouchActive","updateUserSelectNone","updateContextMenuPreventDefault","updateWebkitTouchCalloutNone","updateDraggableFalse","updateShowTimeSincePreviousEvent","updateShowTimeSincePreviousPointerdown","updateShowEventCoordinates","updateShowPointerEvents","updateShowMouseEvents","updateShowTouchEvents","updateConsoleLogEvents","demoOptions","document","style","userSelect","webkitUserSelect","toggle","Provider","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d6db4aa8.chunk.js","sourcesContent":["import { createCss, StitchesCss } from '@stitches/react';\n\nconst stitchesConfig = createCss({\n  theme: {\n    colors: {\n      pageBackground: 'rgb(240,240,240)',\n      backgroundContrast: 'rgb(216,216,216)',\n      highContrast: 'rgb(0,0,0)',\n      lowContrast: 'rgb(128,128,128)',\n      red: 'hsl(0,100%,50%)',\n      orange: 'hsl(30,100%,50%)',\n      yellow: 'hsl(51,100%,40%)',\n      green: 'hsl(120,100%,30%)',\n      blueGreen: 'hsl(180,100%,35%)',\n      blue: 'hsl(240,100%,50%)',\n      purple: 'hsl(270,100%,60%)',\n    },\n  },\n});\n\nexport type CSS = StitchesCss<typeof stitchesConfig>;\n\nexport const { styled, theme, global: createGlobalCss } = stitchesConfig;\n\nexport const darkThemeClass = theme({\n  colors: {\n    pageBackground: 'rgb(32,32,32)',\n    backgroundContrast: 'rgb(64,64,64)',\n    highContrast: 'rgb(192,192,192)',\n    lowContrast: 'rgb(136,136,136)',\n    red: 'hsl(0,100%,50%)',\n    orange: 'hsl(30,90%,50%)',\n    yellow: 'hsl(60,88%,50%)',\n    green: 'hsl(120,85%,42%)',\n    blueGreen: 'hsl(180,100%,50%)',\n    blue: 'hsl(210,100%,60%)',\n    purple: 'hsl(270,85%,60%)',\n  },\n});\n\nexport const globalCss = createGlobalCss({\n  button: {\n    all: 'unset',\n  },\n  'body, div, span, a, p, h1, h2, h3, code, button, form, input': {\n    margin: 0,\n    border: 0,\n    padding: 0,\n    boxSizing: 'inherit',\n    font: 'inherit',\n    fontWeight: 'inherit',\n    textDecoration: 'inherit',\n    textAlign: 'inherit',\n    color: 'inherit',\n    background: 'transparent',\n    // don't set WebkitTapHighlightColor globally b/c\n    // can't revert it to browser default in demos\n    // WebkitTapHighlightColor: 'transparent',\n  },\n  html: {\n    height: '100%',\n  },\n  body: {\n    height: '100%',\n    color: '$highContrast',\n    fontFamily: 'system-ui, Helvetica Neue, sans-serif',\n    WebkitFontSmoothing: 'antialiased',\n    MozOsxFontSmoothing: 'grayscale',\n    fontSize: '16px',\n    boxSizing: 'border-box',\n    textSizeAdjust: 'none',\n  },\n  code: {\n    fontFamily: 'monospace',\n  },\n  '#root': {\n    minHeight: '100%',\n    backgroundColor: '$pageBackground',\n  },\n});\n","import { Interactive } from 'react-interactive';\nimport * as Checkbox from '@radix-ui/react-checkbox';\nimport { SunIcon, CheckIcon } from '@radix-ui/react-icons';\nimport { styled } from './stitches.config';\n\ninterface InteractiveButtonProps {\n  onClick: React.MouseEventHandler<HTMLButtonElement>;\n  className?: string;\n  children: React.ReactNode;\n}\nconst InteractiveButton: React.VFC<InteractiveButtonProps> = ({\n  onClick,\n  className,\n  children,\n}) => (\n  <Interactive as=\"button\" className={className} onClick={onClick}>\n    {children}\n  </Interactive>\n);\nexport const ButtonBase = styled(InteractiveButton, {\n  color: '$highContrast',\n  WebkitTapHighlightColor: 'transparent',\n  '&.hover, &.active': {\n    color: '$green',\n  },\n  '&.focusFromKey': {\n    outline: '2px solid $colors$green',\n    outlineOffset: '2px',\n  },\n});\n\ninterface InteractiveCheckboxProps {\n  checked: boolean;\n  onCheckedChange: React.ChangeEventHandler<HTMLInputElement>;\n  className?: string;\n  disabled?: boolean;\n}\n\nconst InteractiveCheckbox: React.VFC<InteractiveCheckboxProps> = ({\n  checked,\n  onCheckedChange,\n  className,\n  disabled,\n}) => (\n  <Checkbox.Root\n    checked={checked}\n    onCheckedChange={onCheckedChange}\n    className={className}\n    disabled={disabled}\n    as={Interactive}\n  >\n    <Checkbox.Indicator as={CheckIcon} />\n  </Checkbox.Root>\n);\n\nexport const CheckboxBase = styled(InteractiveCheckbox, {\n  appearance: 'none',\n  WebkitTapHighlightColor: 'transparent',\n  backgroundColor: 'transparent',\n  boxShadow: 'inset 0 0 0 1px $colors$highContrast',\n  width: '15px',\n  height: '15px',\n  borderRadius: '2px',\n  display: 'inline-flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  '&.focusFromKey': {\n    outline: 'none',\n    boxShadow: 'inset 0 0 0 1px $colors$green, 0 0 0 1px $colors$green',\n  },\n});\n\ninterface InteractiveLinkProps {\n  href: string;\n  className?: string;\n  children: React.ReactNode;\n}\nconst InteractiveLink: React.VFC<InteractiveLinkProps> = ({\n  href,\n  className,\n  children,\n}) => {\n  return (\n    <Interactive\n      as=\"a\"\n      href={href}\n      className={className}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      {children}\n    </Interactive>\n  );\n};\nexport const Link = styled(InteractiveLink, {\n  color: '$highContrast',\n  borderBottom: '1px dotted $colors$green',\n  textDecoration: 'none',\n  WebkitTapHighlightColor: 'transparent',\n  '&.hover, &.active': {\n    borderBottomStyle: 'solid',\n  },\n  '&.focusFromKey': {\n    outline: '2px solid $colors$green',\n    outlineOffset: '2px',\n  },\n  variants: {\n    type: {\n      lowContrast: {\n        color: '$lowContrast',\n        fontSize: '14px',\n        '&.hover, &.active': {\n          color: '$highContrast',\n        },\n      },\n    },\n  },\n});\n\ninterface DarkModeButtonBaseProps {\n  onClick: React.MouseEventHandler<HTMLButtonElement>;\n  className?: string;\n}\nconst DarkModeButtonBase: React.VFC<DarkModeButtonBaseProps> = ({\n  onClick,\n  className,\n}) => (\n  <ButtonBase className={className} onClick={onClick}>\n    <SunIcon width=\"30\" height=\"30\" />\n  </ButtonBase>\n);\nexport const DarkModeButton = styled(DarkModeButtonBase, {\n  width: '30px',\n  height: '30px',\n});\n","import React, { useState, useMemo, useContext } from 'react';\nimport { eventFrom, EventFromInput } from 'event-from';\nimport { OptionsContext } from './App';\n\nexport type EventCategory =\n  | 'click'\n  | 'mouse'\n  | 'pointer'\n  | 'touch'\n  | 'key'\n  | 'focus'\n  | 'drag'\n  | 'wheel'\n  | 'scroll'\n  | 'select'\n  | 'contextMenu';\n\nconst listOfEventListenerTypes: {\n  propName: string;\n  category: EventCategory;\n}[] = [\n  // click events\n  { propName: 'onClick', category: 'click' },\n  { propName: 'onDoubleClick', category: 'click' },\n  // pointer events\n  { propName: 'onPointerEnter', category: 'pointer' },\n  { propName: 'onPointerLeave', category: 'pointer' },\n  { propName: 'onPointerOver', category: 'pointer' },\n  { propName: 'onPointerOut', category: 'pointer' },\n  { propName: 'onPointerDown', category: 'pointer' },\n  { propName: 'onPointerUp', category: 'pointer' },\n  { propName: 'onPointerMove', category: 'pointer' },\n  { propName: 'onGotPointerCapture', category: 'pointer' },\n  { propName: 'onLostPointerCapture', category: 'pointer' },\n  { propName: 'onPointerCancel', category: 'pointer' },\n  // mouse events\n  { propName: 'onMouseEnter', category: 'mouse' },\n  { propName: 'onMouseLeave', category: 'mouse' },\n  { propName: 'onMouseOver', category: 'mouse' },\n  { propName: 'onMouseOut', category: 'mouse' },\n  { propName: 'onMouseDown', category: 'mouse' },\n  { propName: 'onMouseUp', category: 'mouse' },\n  { propName: 'onMouseMove', category: 'mouse' },\n  // touch events\n  { propName: 'onTouchStart', category: 'touch' },\n  { propName: 'onTouchMove', category: 'touch' },\n  { propName: 'onTouchEnd', category: 'touch' },\n  { propName: 'onTouchCancel', category: 'touch' },\n  // key events\n  { propName: 'onKeyDown', category: 'key' },\n  { propName: 'onKeyUp', category: 'key' },\n  // focus events\n  { propName: 'onFocus', category: 'focus' },\n  { propName: 'onBlur', category: 'focus' },\n  // drag events\n  { propName: 'onDragStart', category: 'drag' },\n  { propName: 'onDrag', category: 'drag' },\n  { propName: 'onDragEnd', category: 'drag' },\n  // wheel and scroll events not fully supported by eventFrom\n  // // wheel event\n  // { propName: 'onWheel', category: 'wheel' },\n  // // scroll event\n  // { propName: 'onScroll', category: 'scroll' },\n  // select event\n  { propName: 'onSelect', category: 'select' },\n  // context menu\n  { propName: 'onContextMenu', category: 'contextMenu' },\n];\n\ninterface FindIndexOfRecentEventOfSameType {\n  (arg: {\n    eventLog: EventLogItem[];\n    type: string;\n    eventFrom: EventFromInput;\n    nowTime: number;\n    recentTimeCutoff: number;\n  }): number | undefined;\n}\n\nconst findIndexOfRecentEventOfSameType: FindIndexOfRecentEventOfSameType = ({\n  eventLog,\n  type,\n  eventFrom,\n  nowTime,\n  recentTimeCutoff,\n}) => {\n  for (\n    let i = eventLog.length - 1;\n    i >= Math.max(eventLog.length - 2, 0);\n    i--\n  ) {\n    const e = eventLog[i];\n    const eventTime = e.lastEventTime || e.time;\n\n    if (\n      e.type === type &&\n      e.eventFrom === eventFrom &&\n      eventTime &&\n      nowTime - eventTime <= recentTimeCutoff\n    )\n      return i;\n  }\n};\n\ninterface CalculateTimeSincePreviousEvent {\n  (arg: { eventLog: EventLogItem[]; nowTime: number; eventType?: string }):\n    | number\n    | undefined;\n}\n\nconst calculateTimeSincePreviousEvent: CalculateTimeSincePreviousEvent = ({\n  eventLog,\n  nowTime,\n  eventType,\n}) => {\n  for (let i = eventLog.length - 1; i >= 0; i--) {\n    if (eventType && eventType !== eventLog[i].type) {\n      continue;\n    }\n    const eventTime = eventLog[i].lastEventTime || eventLog[i].time;\n    if (eventTime !== undefined) {\n      return nowTime - eventTime;\n    }\n  }\n  return undefined;\n};\n\nexport interface EventLogItem {\n  category: EventCategory;\n  type: string;\n  eventFrom: EventFromInput;\n  time?: number;\n  lastEventTime?: number; // used when counting multiple events of the same time, e.g. mousemove\n  timeSincePreviousEvent?: number;\n  timeSincePreviousPointerdown?: number;\n  xCoordinate?: number;\n  yCoordinate?: number;\n  target?: any;\n  count?: number;\n}\n\ninterface EventListener {\n  [key: string]: React.EventHandler<any>;\n}\n\ntype UseEventLog = () => {\n  eventLog: EventLogItem[];\n  eventListeners: EventListener;\n};\n\nexport const useEventLog: UseEventLog = () => {\n  const {\n    setMoveListeners,\n    preventDefaultOnAll,\n    contextMenuPreventDefault,\n    consoleLogEvents,\n  } = useContext(OptionsContext);\n\n  const [eventLog, updateEventLog] = useState<EventLogItem[]>([]);\n\n  const eventListeners = useMemo(\n    () =>\n      listOfEventListenerTypes.reduce(\n        (eventListenersReduceObj: EventListener, listenerType) => {\n          if (\n            !setMoveListeners &&\n            /move/.test(listenerType.propName.toLowerCase())\n          ) {\n            return eventListenersReduceObj;\n          }\n\n          eventListenersReduceObj[listenerType.propName] = (event) => {\n            const eventFromResult = eventFrom(event);\n            const nowTime = Date.now();\n\n            if (\n              preventDefaultOnAll ||\n              (contextMenuPreventDefault && event.type === 'contextmenu')\n            ) {\n              event.preventDefault();\n            }\n\n            if (consoleLogEvents) {\n              console.log(event, `eventFrom: ${eventFromResult}`);\n            }\n\n            updateEventLog((prevState) => {\n              const newState = [...prevState];\n              const recentEventOfSameTypeIdx = findIndexOfRecentEventOfSameType(\n                {\n                  eventLog: newState,\n                  type: event.type,\n                  eventFrom: eventFromResult,\n                  nowTime,\n                  recentTimeCutoff: 1000,\n                },\n              );\n\n              if (\n                [\n                  'click',\n                  'mousemove',\n                  'pointermove',\n                  'touchmove',\n                  'keydown',\n                  'keyup',\n                  'drag',\n                  'scroll',\n                  'wheel',\n                ].includes(event.type) &&\n                recentEventOfSameTypeIdx !== undefined\n              ) {\n                const recentEvent = newState[recentEventOfSameTypeIdx];\n                const newCount = recentEvent.count ? recentEvent.count + 1 : 2;\n                newState[recentEventOfSameTypeIdx] = {\n                  category: listenerType.category,\n                  type: event.type,\n                  eventFrom: eventFromResult,\n                  time: recentEvent.time,\n                  lastEventTime: nowTime,\n                  timeSincePreviousEvent: recentEvent.timeSincePreviousEvent,\n                  timeSincePreviousPointerdown:\n                    recentEvent.timeSincePreviousPointerdown,\n                  xCoordinate: Math.round(event.clientX),\n                  yCoordinate: Math.round(event.clientY),\n                  target: event.target,\n                  count: newCount,\n                };\n              } else {\n                newState.push({\n                  category: listenerType.category,\n                  type: event.type,\n                  eventFrom: eventFromResult,\n                  time: nowTime,\n                  timeSincePreviousEvent: calculateTimeSincePreviousEvent({\n                    eventLog: newState,\n                    nowTime,\n                  }),\n                  timeSincePreviousPointerdown: calculateTimeSincePreviousEvent(\n                    {\n                      eventLog: newState,\n                      eventType: 'pointerdown',\n                      nowTime,\n                    },\n                  ),\n                  xCoordinate: Math.round(event.clientX),\n                  yCoordinate: Math.round(event.clientY),\n                  target: event.target,\n                });\n              }\n\n              return newState;\n            });\n          };\n          return eventListenersReduceObj;\n        },\n        {},\n      ),\n    [\n      setMoveListeners,\n      preventDefaultOnAll,\n      contextMenuPreventDefault,\n      consoleLogEvents,\n    ],\n  );\n\n  return { eventLog, eventListeners };\n};\n","import { useEffect, useRef, useContext } from 'react';\nimport { OptionsContext } from './App';\nimport { EventLogItem } from './useEventLog';\nimport { EventCategory } from './useEventLog';\nimport { styled } from './stitches.config';\n\nconst EventLogContainer = styled('div', {\n  height: '300px',\n  padding: '0 5px',\n  border: '1px solid $colors$highContrast',\n  overflow: 'scroll',\n});\n\nconst EventLogLine = styled('code', {\n  display: 'block',\n  variants: {\n    spaceAbove: {\n      true: {\n        marginTop: '20px',\n      },\n    },\n  },\n});\n\nconst InfoType = styled('span', {\n  variants: {\n    type: {\n      click: { color: '$blue' },\n      pointer: { color: '$green' },\n      mouse: { color: '$purple' },\n      touch: { color: '$orange' },\n      key: { color: '$yellow' },\n      focus: { color: '$blueGreen' },\n      cancel: { color: '$red' },\n      lowContrast: { color: '$lowContrast' },\n    },\n  },\n});\n\nconst determineInfoType = (category: EventCategory, type: string) => {\n  if (type === 'pointercancel' || type === 'touchcancel') return 'cancel';\n  switch (category) {\n    case 'click':\n      return category;\n    case 'pointer':\n      return category;\n    case 'mouse':\n      return category;\n    case 'touch':\n      return category;\n    case 'key':\n      return category;\n    case 'focus':\n      return category;\n    default:\n      return undefined;\n  }\n};\n\ninterface EventLogUIProps {\n  eventLog: EventLogItem[];\n  height?: string;\n}\n\nexport const EventLogUI: React.VFC<EventLogUIProps> = ({\n  eventLog,\n  height,\n}) => {\n  const {\n    showTimeSincePreviousEvent,\n    showTimeSincePreviousPointerdown,\n    showEventCoordinates,\n    showPointerEvents,\n    showMouseEvents,\n    showTouchEvents,\n  } = useContext(OptionsContext);\n\n  const eventLogEl = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (eventLogEl && eventLogEl.current) {\n      eventLogEl.current.scrollTop = eventLogEl.current.scrollHeight;\n    }\n  });\n\n  const eventsToExclude: string[] = [];\n  if (!showPointerEvents) eventsToExclude.push('pointer');\n  if (!showMouseEvents) eventsToExclude.push('mouse');\n  if (!showTouchEvents) eventsToExclude.push('touch');\n\n  return (\n    <EventLogContainer ref={eventLogEl} css={{ height }}>\n      {eventLog.map(\n        (\n          {\n            category,\n            type,\n            count,\n            eventFrom,\n            time,\n            timeSincePreviousEvent,\n            timeSincePreviousPointerdown,\n            xCoordinate,\n            yCoordinate,\n          },\n          idx,\n        ) =>\n          eventsToExclude.includes(category) ? null : (\n            <EventLogLine\n              key={`${idx}${type}${count}`}\n              spaceAbove={\n                timeSincePreviousEvent !== undefined &&\n                timeSincePreviousEvent > 1000\n              }\n            >\n              <InfoType type=\"lowContrast\">{idx}</InfoType>{' '}\n              <InfoType type={determineInfoType(category, type)}>\n                {type}\n                {count ? ` (${count})` : ''}\n              </InfoType>{' '}\n              eventFrom <InfoType type={eventFrom}>{eventFrom}</InfoType>\n              {showTimeSincePreviousEvent &&\n                timeSincePreviousEvent !== undefined && (\n                  <span>, {timeSincePreviousEvent}ms</span>\n                )}\n              {showTimeSincePreviousPointerdown &&\n                timeSincePreviousPointerdown !== undefined && (\n                  <span>, {timeSincePreviousPointerdown}ms_pointerdown</span>\n                )}\n              {showEventCoordinates && (\n                <span>\n                  , x:{xCoordinate}, y:{yCoordinate}\n                </span>\n              )}\n            </EventLogLine>\n          ),\n      )}\n    </EventLogContainer>\n  );\n};\n","import { useMemo, useContext } from 'react';\nimport { Interactive, InteractiveExtendableProps } from 'react-interactive';\nimport { styled, CSS } from './stitches.config';\nimport { useEventLog } from './useEventLog';\nimport { EventLogUI } from './EventLogUI';\nimport { OptionsContext } from './App';\n\nconst DemoContainer = styled('div', {\n  paddingBottom: '20px',\n  margin: '20px 0',\n  borderBottom: '1px dotted $colors$lowContrast',\n});\n\nconst DemoButtonSharedStyle: CSS = {\n  display: 'block',\n  width: '100%',\n  height: '70px',\n  margin: '10px 0',\n  fontSize: '24px',\n  textAlign: 'center',\n  color: '$highContrast',\n  border: '1px solid $colors$highContrast',\n};\n\nconst InteractiveButton: React.VFC<InteractiveExtendableProps<'button'>> = (\n  props,\n) => <Interactive {...props} as=\"button\" />;\n\nconst DemoButtonInteractive = styled(InteractiveButton, {\n  ...DemoButtonSharedStyle,\n  '&.hover, &.active': {\n    color: '$green',\n    borderColor: '$green',\n  },\n  '&.focusFromKey': {\n    outline: '2px solid $colors$green',\n    outlineOffset: '2px',\n  },\n});\n\nconst DemoButtonRegular = styled('button', {\n  ...DemoButtonSharedStyle,\n  '&:hover, &:active': {\n    color: '$green',\n    borderColor: '$green',\n  },\n  '&:focus': {\n    outline: '2px solid $colors$green',\n    outlineOffset: '2px',\n  },\n});\n\nconst DemoLinkContainer = styled('div', {\n  margin: '10px 0',\n});\n\nconst DemoLinkSharedStyle: CSS = {\n  fontSize: '24px',\n};\n\nconst InteractiveLink: React.VFC<InteractiveExtendableProps<'a'>> = (props) => (\n  <Interactive {...props} as=\"a\" />\n);\n\nconst DemoLinkInteractive = styled(InteractiveLink, {\n  ...DemoLinkSharedStyle,\n  '&.hover, &.active': {\n    color: '$green',\n    borderColor: '$green',\n  },\n  '&.focusFromKey': {\n    outline: '2px solid $colors$green',\n    outlineOffset: '2px',\n  },\n});\n\nconst DemoLinkRegular = styled('a', {\n  ...DemoLinkSharedStyle,\n  '&:hover, &:active': {\n    color: '$green',\n    borderColor: '$green',\n  },\n  '&:focus': {\n    outline: '2px solid $colors$green',\n    outlineOffset: '2px',\n  },\n});\n\nconst ScrollableContainer = styled('div', {\n  margin: '10px 0',\n  height: '100px',\n  padding: '0 5px',\n  border: '1px solid $colors$highContrast',\n  overflow: 'scroll',\n});\n\nconst ScrollableItem = styled('div', {\n  pointerEvents: 'none',\n});\n\nconst FormHeader = styled('h3', {\n  fontSize: '14px',\n  margin: '12px 0 2px',\n  color: '$lowContrast',\n});\n\nconst DemoTextInputSharedStyle: CSS = {\n  width: '100%',\n  fontSize: '24px',\n  border: '1px solid $colors$highContrast',\n  padding: '2px 4px',\n};\n\nconst InteractiveTextInput: React.VFC<InteractiveExtendableProps<'input'>> = (\n  props,\n) => <Interactive {...props} as=\"input\" type=\"text\" />;\n\nconst DemoTextInputInteractive = styled(InteractiveTextInput, {\n  ...DemoTextInputSharedStyle,\n  '&.hover, &.active': {\n    color: '$green',\n    borderColor: '$green',\n  },\n  '&.focus': {\n    outline: '2px solid $colors$green',\n    outlineOffset: '-1px',\n  },\n});\n\nconst DemoTextInputRegular = styled('input', {\n  ...DemoTextInputSharedStyle,\n  '&:hover, &:active': {\n    color: '$green',\n    borderColor: '$green',\n  },\n  '&:focus': {\n    outline: '2px solid $colors$green',\n    outlineOffset: '-1px',\n  },\n});\n\nconst DemoSubmitInputSharedStyle: CSS = {\n  display: 'block',\n  width: '100%',\n  height: '44px',\n  margin: '10px 0',\n  fontSize: '24px',\n  textAlign: 'center',\n  color: '$highContrast',\n  border: '1px solid $colors$highContrast',\n};\n\nconst InteractiveSubmitInput: React.VFC<InteractiveExtendableProps<'input'>> = (\n  props,\n) => <Interactive {...props} as=\"input\" type=\"submit\" />;\n\nconst DemoSubmitInputInteractive = styled(InteractiveSubmitInput, {\n  ...DemoSubmitInputSharedStyle,\n  '&.hover, &.active': {\n    color: '$green',\n    borderColor: '$green',\n  },\n  '&.focusFromKey': {\n    outline: '2px solid $colors$green',\n    outlineOffset: '2px',\n  },\n});\n\nconst DemoSubmitInputRegular = styled('input', {\n  ...DemoSubmitInputSharedStyle,\n  '&:hover, &:active': {\n    color: '$green',\n    borderColor: '$green',\n  },\n  '&:focus': {\n    outline: '2px solid $colors$green',\n    outlineOffset: '2px',\n  },\n});\n\nexport const ButtonDemo: React.VFC = () => {\n  const {\n    useReactInteractive,\n    riUseExtendedTouchActive,\n    touchActionNone,\n    webkitTapHighlightColorTransparent,\n    webkitTouchCalloutNone,\n  } = useContext(OptionsContext);\n  const { eventLog, eventListeners } = useEventLog();\n  return (\n    <DemoContainer id=\"button-demo\">\n      {useReactInteractive ? (\n        <DemoButtonInteractive\n          {...eventListeners}\n          useExtendedTouchActive={riUseExtendedTouchActive}\n          css={{\n            WebkitTapHighlightColor: webkitTapHighlightColorTransparent\n              ? 'transparent'\n              : undefined,\n          }}\n        >\n          Test Button\n        </DemoButtonInteractive>\n      ) : (\n        <DemoButtonRegular\n          {...eventListeners}\n          css={{\n            touchAction: touchActionNone ? 'none' : undefined,\n            WebkitTapHighlightColor: webkitTapHighlightColorTransparent\n              ? 'transparent'\n              : undefined,\n            WebkitTouchCallout: webkitTouchCalloutNone ? 'none' : undefined,\n          }}\n        >\n          Test Button\n        </DemoButtonRegular>\n      )}\n      <EventLogUI eventLog={eventLog} />\n    </DemoContainer>\n  );\n};\n\nexport const LinkDemo: React.VFC = () => {\n  const {\n    useReactInteractive,\n    riUseExtendedTouchActive,\n    touchActionNone,\n    webkitTapHighlightColorTransparent,\n    webkitTouchCalloutNone,\n    draggableFalse,\n  } = useContext(OptionsContext);\n  const { eventLog, eventListeners } = useEventLog();\n  return (\n    <DemoContainer id=\"link-demo\">\n      <DemoLinkContainer>\n        {useReactInteractive ? (\n          <DemoLinkInteractive\n            {...eventListeners}\n            href=\"#link-demo\"\n            useExtendedTouchActive={riUseExtendedTouchActive}\n            css={{\n              WebkitTapHighlightColor: webkitTapHighlightColorTransparent\n                ? 'transparent'\n                : undefined,\n            }}\n          >\n            Test link with href=\"#link-demo\"\n          </DemoLinkInteractive>\n        ) : (\n          <DemoLinkRegular\n            {...eventListeners}\n            href=\"#link-demo\"\n            draggable={draggableFalse ? false : undefined}\n            css={{\n              touchAction: touchActionNone ? 'none' : undefined,\n              WebkitTapHighlightColor: webkitTapHighlightColorTransparent\n                ? 'transparent'\n                : undefined,\n              WebkitTouchCallout: webkitTouchCalloutNone ? 'none' : undefined,\n            }}\n          >\n            Test link with href=\"#link-demo\"\n          </DemoLinkRegular>\n        )}\n      </DemoLinkContainer>\n      <EventLogUI eventLog={eventLog} />\n    </DemoContainer>\n  );\n};\n\nexport const ScrollableDemo: React.VFC = () => {\n  const {\n    touchActionNone,\n    webkitTapHighlightColorTransparent,\n    webkitTouchCalloutNone,\n  } = useContext(OptionsContext);\n  const { eventLog, eventListeners } = useEventLog();\n  return (\n    <DemoContainer id=\"scrollable-demo\">\n      <ScrollableContainer\n        {...eventListeners}\n        css={{\n          touchAction: touchActionNone ? 'none' : undefined,\n          WebkitTapHighlightColor: webkitTapHighlightColorTransparent\n            ? 'transparent'\n            : undefined,\n          WebkitTouchCallout: webkitTouchCalloutNone ? 'none' : undefined,\n        }}\n      >\n        {useMemo(\n          () =>\n            Array(100)\n              .fill(1)\n              .map((_, idx) => (\n                <ScrollableItem key={idx}>{idx} scroll me</ScrollableItem>\n              )),\n          [],\n        )}\n      </ScrollableContainer>\n      <EventLogUI eventLog={eventLog} />\n    </DemoContainer>\n  );\n};\n\nexport const FormDemo: React.VFC = () => {\n  const {\n    useReactInteractive,\n    riUseExtendedTouchActive,\n    touchActionNone,\n    webkitTapHighlightColorTransparent,\n    webkitTouchCalloutNone,\n  } = useContext(OptionsContext);\n  const textInput = useEventLog();\n  const submitInput = useEventLog();\n  return (\n    <DemoContainer id=\"form-demo\">\n      <form onSubmit={(e) => e.preventDefault()}>\n        {useReactInteractive ? (\n          <DemoTextInputInteractive\n            {...textInput.eventListeners}\n            useExtendedTouchActive={riUseExtendedTouchActive}\n            placeholder=\"Form demo\"\n            css={{\n              WebkitTapHighlightColor: webkitTapHighlightColorTransparent\n                ? 'transparent'\n                : undefined,\n            }}\n          />\n        ) : (\n          <DemoTextInputRegular\n            {...textInput.eventListeners}\n            type=\"text\"\n            placeholder=\"Form demo\"\n            css={{\n              touchAction: touchActionNone ? 'none' : undefined,\n              WebkitTapHighlightColor: webkitTapHighlightColorTransparent\n                ? 'transparent'\n                : undefined,\n              WebkitTouchCallout: webkitTouchCalloutNone ? 'none' : undefined,\n            }}\n          />\n        )}\n        {useReactInteractive ? (\n          <DemoSubmitInputInteractive\n            {...submitInput.eventListeners}\n            useExtendedTouchActive={riUseExtendedTouchActive}\n            value=\"Submit\"\n            css={{\n              WebkitTapHighlightColor: webkitTapHighlightColorTransparent\n                ? 'transparent'\n                : undefined,\n            }}\n          />\n        ) : (\n          <DemoSubmitInputRegular\n            {...submitInput.eventListeners}\n            type=\"submit\"\n            value=\"Submit\"\n            css={{\n              touchAction: touchActionNone ? 'none' : undefined,\n              WebkitTapHighlightColor: webkitTapHighlightColorTransparent\n                ? 'transparent'\n                : undefined,\n              WebkitTouchCallout: webkitTouchCalloutNone ? 'none' : undefined,\n            }}\n          />\n        )}\n      </form>\n      <FormHeader>Text input event log</FormHeader>\n      <EventLogUI eventLog={textInput.eventLog} height=\"150px\" />\n      <FormHeader>Submit input event log</FormHeader>\n      <EventLogUI eventLog={submitInput.eventLog} height=\"150px\" />\n    </DemoContainer>\n  );\n};\n","import { useState, useEffect, useMemo, createContext } from 'react';\nimport useDarkMode from 'use-dark-mode';\nimport * as Label from '@radix-ui/react-label';\nimport { styled, globalCss, darkThemeClass } from './stitches.config';\nimport { Link, ButtonBase, CheckboxBase, DarkModeButton } from './Interactive';\nimport {\n  ButtonDemo,\n  LinkDemo,\n  // ScrollableDemo,\n  FormDemo,\n} from './Demos';\n\nconst AppDiv = styled('div', {\n  maxWidth: '700px',\n  padding: '14px 15px 25px',\n  margin: '0 auto',\n});\n\nconst H1 = styled('h1', {\n  fontSize: '26px',\n  display: 'flex',\n  justifyContent: 'space-between',\n  marginBottom: '2px',\n});\n\nconst InfoContainer = styled('p', {\n  padding: '10px 0',\n  borderBottom: '1px dotted $colors$lowContrast',\n});\n\nconst DemoOptionsContainer = styled('div', {\n  borderBottom: '1px dotted $colors$lowContrast',\n  '& code': {\n    backgroundColor: '$backgroundContrast',\n    padding: '0 5px',\n    borderRadius: '5px',\n  },\n});\n\nconst DemoOptionsButton = styled(ButtonBase, {\n  display: 'block',\n  margin: '10px 0',\n  fontSize: '20px',\n});\n\nconst OptionsContainer = styled('div', {\n  paddingBottom: '6px',\n});\n\nconst OptionSectionHeading = styled('div', {\n  margin: '14px 0 6px',\n  fontWeight: '600',\n});\n\nconst OptionItemContainer = styled('div', {\n  margin: '8px 0',\n});\n\nconst OptionLabel = styled(Label.Root, {\n  cursor: 'pointer',\n  WebkitTapHighlightColor: 'transparent',\n  variants: {\n    disabled: {\n      true: {\n        opacity: 0.5,\n        cursor: 'unset',\n      },\n    },\n  },\n});\n\nconst OptionCheckbox = styled(CheckboxBase, {\n  verticalAlign: 'top',\n  marginTop: '2px',\n  marginRight: '4px',\n});\n\ninterface OptionItemCheckboxProps {\n  label: React.ReactNode;\n  checked: boolean;\n  disabled?: boolean;\n  setChecked: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst OptionItemCheckbox: React.VFC<OptionItemCheckboxProps> = ({\n  label,\n  checked,\n  disabled,\n  setChecked,\n}) => (\n  <OptionItemContainer>\n    <OptionLabel disabled={disabled}>\n      <OptionCheckbox\n        disabled={disabled}\n        checked={checked}\n        onCheckedChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n          setChecked(event.target.checked)\n        }\n      />\n      {label}\n    </OptionLabel>\n  </OptionItemContainer>\n);\n\ninterface DemoOptionsInterface {\n  useReactInteractive: boolean;\n  setMoveListeners: boolean;\n  preventDefaultOnAll: boolean;\n  touchActionNone: boolean;\n  webkitTapHighlightColorTransparent: boolean;\n  riUseExtendedTouchActive: boolean;\n  userSelectNone: boolean;\n  webkitTouchCalloutNone: boolean;\n  contextMenuPreventDefault: boolean;\n  draggableFalse: boolean;\n  showTimeSincePreviousEvent: boolean;\n  showEventCoordinates: boolean;\n  showPointerEvents: boolean;\n  showMouseEvents: boolean;\n  showTouchEvents: boolean;\n  showTimeSincePreviousPointerdown: boolean;\n  consoleLogEvents: boolean;\n}\n\nexport const OptionsContext = createContext<DemoOptionsInterface>({\n  useReactInteractive: false,\n  setMoveListeners: false,\n  preventDefaultOnAll: false,\n  touchActionNone: false,\n  webkitTapHighlightColorTransparent: false,\n  riUseExtendedTouchActive: false,\n  userSelectNone: false,\n  webkitTouchCalloutNone: false,\n  contextMenuPreventDefault: false,\n  draggableFalse: false,\n  showTimeSincePreviousEvent: false,\n  showEventCoordinates: false,\n  showPointerEvents: false,\n  showMouseEvents: false,\n  showTouchEvents: false,\n  showTimeSincePreviousPointerdown: false,\n  consoleLogEvents: false,\n});\n\nexport const App = () => {\n  globalCss();\n\n  const darkMode = useDarkMode(undefined, {\n    classNameDark: darkThemeClass,\n  });\n\n  const [showDemoOptions, updateShowDemoOptions] = useState(false);\n\n  // options\n  const [useReactInteractive, updateUseReactInteractive] = useState(true);\n  const [setMoveListeners, updateSetMoveListeners] = useState(true);\n  const [preventDefaultOnAll, updatePreventDefaultOnAll] = useState(false);\n  const [touchActionNone, updateTouchActionNone] = useState(false);\n  const [\n    webkitTapHighlightColorTransparent,\n    updateWebkitTapHighlightColorTransparent,\n  ] = useState(true);\n\n  // options to enable long press on touch devices\n  const [\n    riUseExtendedTouchActive,\n    updateInteractiveUseExtendedTouchActive,\n  ] = useState(false);\n  const [userSelectNone, updateUserSelectNone] = useState(false);\n  const [contextMenuPreventDefault, updateContextMenuPreventDefault] = useState(\n    false,\n  );\n  const [webkitTouchCalloutNone, updateWebkitTouchCalloutNone] = useState(\n    false,\n  );\n  const [draggableFalse, updateDraggableFalse] = useState(false);\n\n  // when using react-interactive ensure the the following are set to false\n  if (useReactInteractive) {\n    userSelectNone && updateUserSelectNone(false);\n    contextMenuPreventDefault && updateContextMenuPreventDefault(false);\n    webkitTouchCalloutNone && updateWebkitTouchCalloutNone(false);\n    draggableFalse && updateDraggableFalse(false);\n  }\n\n  // event log options\n  const [\n    showTimeSincePreviousEvent,\n    updateShowTimeSincePreviousEvent,\n  ] = useState(false);\n  const [\n    showTimeSincePreviousPointerdown,\n    updateShowTimeSincePreviousPointerdown,\n  ] = useState(false);\n  const [showEventCoordinates, updateShowEventCoordinates] = useState(false);\n  const [showPointerEvents, updateShowPointerEvents] = useState(true);\n  const [showMouseEvents, updateShowMouseEvents] = useState(true);\n  const [showTouchEvents, updateShowTouchEvents] = useState(true);\n  const [consoleLogEvents, updateConsoleLogEvents] = useState(false);\n\n  const demoOptions: DemoOptionsInterface = useMemo(\n    () => ({\n      useReactInteractive,\n      setMoveListeners,\n      preventDefaultOnAll,\n      touchActionNone,\n      webkitTapHighlightColorTransparent,\n      riUseExtendedTouchActive,\n      userSelectNone,\n      webkitTouchCalloutNone,\n      contextMenuPreventDefault,\n      draggableFalse,\n      showTimeSincePreviousEvent,\n      showEventCoordinates,\n      showPointerEvents,\n      showMouseEvents,\n      showTouchEvents,\n      showTimeSincePreviousPointerdown,\n      consoleLogEvents,\n    }),\n    [\n      useReactInteractive,\n      setMoveListeners,\n      preventDefaultOnAll,\n      touchActionNone,\n      webkitTapHighlightColorTransparent,\n      riUseExtendedTouchActive,\n      userSelectNone,\n      webkitTouchCalloutNone,\n      contextMenuPreventDefault,\n      draggableFalse,\n      showTimeSincePreviousEvent,\n      showEventCoordinates,\n      showPointerEvents,\n      showMouseEvents,\n      showTouchEvents,\n      showTimeSincePreviousPointerdown,\n      consoleLogEvents,\n    ],\n  );\n\n  // set user-select: none on the body when userSelectNone is enabled\n  useEffect(() => {\n    document.body.style.userSelect = userSelectNone ? 'none' : '';\n    document.body.style.webkitUserSelect = userSelectNone ? 'none' : '';\n  }, [userSelectNone]);\n\n  return (\n    <AppDiv>\n      <H1 className={undefined}>\n        <span>Event From Demo</span>\n        <DarkModeButton onClick={darkMode.toggle} />\n      </H1>\n      <Link type=\"lowContrast\" href=\"https://github.com/rafgraph/event-from\">\n        https://github.com/rafgraph/event-from\n      </Link>\n      <InfoContainer>\n        Some buttons, links, etc with event listeners and logs to demonstrate{' '}\n        <code>eventFrom</code>.\n      </InfoContainer>\n      <DemoOptionsContainer>\n        <DemoOptionsButton\n          onClick={() => updateShowDemoOptions(!showDemoOptions)}\n        >\n          Demo options - {`${showDemoOptions ? 'hide' : 'show'}`}\n        </DemoOptionsButton>\n        {showDemoOptions && (\n          <OptionsContainer>\n            <OptionItemCheckbox\n              label={\n                <>\n                  Use{' '}\n                  <Link href=\"https://github.com/rafgraph/react-interactive\">\n                    React Interactive\n                  </Link>{' '}\n                  for interactive elements in demo (button, link, input, etc)\n                </>\n              }\n              checked={useReactInteractive}\n              setChecked={updateUseReactInteractive}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  Set <code>move</code> event listeners in demo\n                </>\n              }\n              checked={setMoveListeners}\n              setChecked={updateSetMoveListeners}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  Call <code>preventDefault()</code> on all events in demo\n                </>\n              }\n              checked={preventDefaultOnAll}\n              setChecked={updatePreventDefaultOnAll}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  <code>touch-action: none</code>, set on the element, prevents\n                  the browser from using the touch interaction, e.g. scrolling\n                  when touch starts on the button, and also prevents{' '}\n                  <code>pointercancel</code> event during a touch interaction.\n                </>\n              }\n              checked={touchActionNone}\n              setChecked={updateTouchActionNone}\n            />\n            <OptionItemCheckbox\n              label={<code>-webkit-tap-highlight-color: transparent</code>}\n              checked={webkitTapHighlightColorTransparent}\n              setChecked={updateWebkitTapHighlightColorTransparent}\n            />\n            <OptionSectionHeading>\n              Options to enable long press on touch devices:\n            </OptionSectionHeading>\n            <OptionItemCheckbox\n              disabled={!useReactInteractive}\n              label={\n                <>\n                  React Interactive's <code>useExtendedTouchActive</code>, note\n                  that when using React Interactive the below options are\n                  disabled because they are implemented by React Interactive\n                  when <code>useExtendedTouchActive</code> is true.\n                </>\n              }\n              checked={riUseExtendedTouchActive}\n              setChecked={updateInteractiveUseExtendedTouchActive}\n            />\n            <OptionItemCheckbox\n              disabled={useReactInteractive}\n              label={\n                <>\n                  <code>user-select: none</code>, set on the{' '}\n                  <code>{'<body>'}</code>, iOS on long press attempts to select\n                  nearby text even if the target element has set{' '}\n                  <code>user-select: none</code>, so need to set it on the body\n                  and not the element.\n                </>\n              }\n              checked={userSelectNone}\n              setChecked={updateUserSelectNone}\n            />\n            <OptionItemCheckbox\n              disabled={useReactInteractive}\n              label={\n                <>\n                  <code>contextmenu</code> event <code>preventDefault()</code>,\n                  to prevent the context menu from appearing on long press of\n                  links.\n                </>\n              }\n              checked={contextMenuPreventDefault}\n              setChecked={updateContextMenuPreventDefault}\n            />\n            <OptionItemCheckbox\n              disabled={useReactInteractive}\n              label={\n                <>\n                  <code>-webkit-touch-callout: none</code>, to prevent the iOS\n                  \"context menu\" from appearing on long press of links because\n                  iOS doesn't support <code>conextmenu</code> events.\n                </>\n              }\n              checked={webkitTouchCalloutNone}\n              setChecked={updateWebkitTouchCalloutNone}\n            />\n            <OptionItemCheckbox\n              disabled={useReactInteractive}\n              label={\n                <>\n                  <code>draggable=\"false\"</code>, to prevent from dragging links\n                  on long press on iPadOS.\n                </>\n              }\n              checked={draggableFalse}\n              setChecked={updateDraggableFalse}\n            />\n            <OptionSectionHeading>Event log options:</OptionSectionHeading>\n            <OptionItemCheckbox\n              label={'Show time (ms) since previous event'}\n              checked={showTimeSincePreviousEvent}\n              setChecked={updateShowTimeSincePreviousEvent}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  Show time (ms) since previous <code>pointerdown</code> event\n                </>\n              }\n              checked={showTimeSincePreviousPointerdown}\n              setChecked={updateShowTimeSincePreviousPointerdown}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  Show event coordinates: <code>clientX</code>,{' '}\n                  <code>clientY</code>\n                </>\n              }\n              checked={showEventCoordinates}\n              setChecked={updateShowEventCoordinates}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  Show <code>pointer</code> events\n                </>\n              }\n              checked={showPointerEvents}\n              setChecked={updateShowPointerEvents}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  Show <code>mouse</code> events\n                </>\n              }\n              checked={showMouseEvents}\n              setChecked={updateShowMouseEvents}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  Show <code>touch</code> events\n                </>\n              }\n              checked={showTouchEvents}\n              setChecked={updateShowTouchEvents}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  <code>console.log</code> all events\n                </>\n              }\n              checked={consoleLogEvents}\n              setChecked={updateConsoleLogEvents}\n            />\n          </OptionsContainer>\n        )}\n      </DemoOptionsContainer>\n      <OptionsContext.Provider value={demoOptions}>\n        <ButtonDemo />\n        <LinkDemo />\n        {/* scroll events not fully supported by eventFrom */}\n        {/* <ScrollableDemo /> */}\n        <FormDemo />\n      </OptionsContext.Provider>\n    </AppDiv>\n  );\n};\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}