{"version":3,"sources":["stitches.config.ts","Interactive.tsx","useEventLog.ts","EventLogUI.tsx","Demos.tsx","App.tsx","index.tsx"],"names":["styled","css","createStyled","prefix","tokens","colors","$pageBackground","$highContrast","$lowContrast","$red","$orange","$yellow","$green","$blueGreen","$blue","$purple","breakpoints","utils","darkThemeClass","theme","globalStyles","global","all","margin","border","padding","boxSizing","font","fontWeight","textDecoration","textAlign","color","background","html","height","body","fontFamily","WebkitFontSmoothing","MozOsxFontSmoothing","fontSize","textSizeAdjust","minHeight","backgroundColor","StyledDarkModeToggle","onClick","className","props","toString","as","hover","active","focusFromTab","style","outline","outlineOffset","touchActiveTapOnly","width","outlineColor","StyledInteractiveLink","target","rel","borderBottom","borderBottomStyle","variants","type","lowContrast","borderBottomWidth","lineHeight","userSelect","borderColor","listOfEventListenerTypes","propName","category","calculateTimeSincePreviousEvent","eventLog","nowTime","eventType","i","length","eventTime","lastEventTime","time","undefined","useEventLog","setMoveListeners","preventDefaultOnAll","contextMenuPreventDefault","consoleLogEvents","updateEventLog","useState","eventListeners","useMemo","reduce","eventListenersReduceObj","listenerType","test","toLowerCase","event","eventFromResult","eventFrom","Date","now","preventDefault","console","log","prevState","newState","recentEventOfSameTypeIdx","recentTimeCutoff","Math","max","e","findIndexOfRecentEventOfSameType","includes","recentEvent","newCount","count","timeSincePreviousEvent","timeSincePreviousPointerdown","xCoordinate","round","clientX","yCoordinate","clientY","push","EventLogContainer","overflow","EventLogLine","display","spaceAbove","true","marginTop","InfoType","click","pointer","mouse","touch","key","focus","cancel","determineInfoType","EventLogUI","showTimeSincePreviousEvent","showTimeSincePreviousPointerdown","showEventCoordinates","showPointerEvents","showMouseEvents","showTouchEvents","eventLogEl","useRef","useEffect","current","scrollTop","scrollHeight","eventsToExclude","ref","map","idx","arr","DemoContainer","paddingBottom","TestButton","TestLinkContainer","TestLink","FormHeader","pointerEvents","TextInput","SubmitInput","ButtonDemo","touchActionNone","webkitTapHighlightColorTransparent","webkitTouchCalloutNone","id","touchAction","WebkitTapHighlightColor","WebkitTouchCallout","LinkDemo","draggableFalse","href","draggable","FormDemo","textInput","submitInput","onSubmit","placeholder","value","AppDiv","maxWidth","H1","justifyContent","marginBottom","InfoP","DemoOptionsContainer","DemoOptionsButton","cursor","OptionsContainer","OptionSectionHeading","OptionItemContainer","StyledLabel","StyledCheckbox","appearance","verticalAlign","marginRight","OptionItemCheckbox","label","checked","update","onChange","App","darkMode","useDarkMode","classNameDark","showDemoOptions","updateShowDemoOptions","updateSetMoveListeners","updatePreventDefaultOnAll","updateTouchActionNone","updateWebkitTapHighlightColorTransparent","userSelectNone","updateUserSelectNone","updateContextMenuPreventDefault","updateWebkitTouchCalloutNone","updateDraggableFalse","updateShowTimeSincePreviousEvent","updateShowTimeSincePreviousPointerdown","updateShowEventCoordinates","updateShowPointerEvents","updateShowMouseEvents","updateShowTouchEvents","updateConsoleLogEvents","demoOptions","document","webkitUserSelect","toggle","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c7996da5.chunk.js","sourcesContent":["import { createStyled } from '@stitches/react';\n\nexport const { styled, css } = createStyled({\n  prefix: '',\n  tokens: {\n    colors: {\n      $pageBackground: 'rgb(240,240,240)',\n      $highContrast: 'rgb(0,0,0)',\n      $lowContrast: 'rgb(128,128,128)',\n      $red: 'hsl(0,100%,50%)',\n      $orange: 'hsl(30,100%,50%)',\n      $yellow: 'hsl(51,100%,40%)',\n      $green: 'hsl(120,100%,30%)',\n      $blueGreen: 'hsl(180,100%,35%)',\n      $blue: 'hsl(240,100%,50%)',\n      $purple: 'hsl(270,100%,60%)',\n    },\n  },\n  breakpoints: {},\n  utils: {},\n});\n\nexport const darkThemeClass = css.theme({\n  colors: {\n    $pageBackground: 'rgb(32,32,32)',\n    $highContrast: 'rgb(192,192,192)',\n    $lowContrast: 'rgb(136,136,136)',\n    $red: 'hsl(0,100%,50%)',\n    $orange: 'hsl(30,90%,50%)',\n    $yellow: 'hsl(60,88%,50%)',\n    $green: 'hsl(120,85%,42%)',\n    $blueGreen: 'hsl(180,100%,50%)',\n    $blue: 'hsl(210,100%,60%)',\n    $purple: 'hsl(270,85%,60%)',\n  },\n});\n\nexport const globalStyles = css.global({\n  'button, input': {\n    all: 'unset',\n  },\n  'body, div, span, a, p, h1, h2, h3, code, button, form, input': {\n    margin: 0,\n    border: 0,\n    padding: 0,\n    boxSizing: 'inherit',\n    font: 'inherit',\n    fontWeight: 'inherit',\n    textDecoration: 'inherit',\n    textAlign: 'inherit',\n    color: 'inherit',\n    background: 'transparent',\n  },\n  html: {\n    height: '100%',\n  },\n  body: {\n    height: '100%',\n    color: '$highContrast',\n    fontFamily: 'system-ui, Helvetica Neue, sans-serif',\n    WebkitFontSmoothing: 'antialiased',\n    MozOsxFontSmoothing: 'grayscale',\n    fontSize: '16px',\n    boxSizing: 'border-box',\n    textSizeAdjust: 'none',\n  },\n  '#root': {\n    minHeight: '100%',\n    backgroundColor: '$pageBackground',\n  },\n});\n","import Interactive from 'react-interactive';\nimport { SunIcon } from '@modulz/radix-icons';\nimport { styled } from './stitches.config';\n\ninterface DarkModeToggleProps {\n  onClick: () => void;\n  className?: any;\n}\nconst DarkModeToggle: React.VFC<DarkModeToggleProps> = ({\n  onClick,\n  className,\n  ...props\n}) => {\n  return (\n    <Interactive\n      {...props}\n      className={className.toString()}\n      onClick={onClick}\n      as=\"button\"\n      hover={{ className: 'hover' }}\n      active={{ className: 'active' }}\n      focusFromTab={{\n        className: 'focusFromTab',\n        style: {\n          outline: null,\n          outlineOffset: null,\n        },\n      }}\n      touchActiveTapOnly\n    >\n      <SunIcon width=\"30\" height=\"30\" />\n    </Interactive>\n  );\n};\n\nexport const StyledDarkModeToggle = styled(DarkModeToggle, {\n  color: '$highContrast',\n  width: '30px',\n  height: '30px',\n  '&.hover, &.active': {\n    color: '$green',\n  },\n\n  '&.focusFromTab': {\n    // have separate outlineColor b/c tokens don't work in outline shorthand\n    // https://github.com/modulz/stitches/issues/103\n    outlineColor: '$green',\n    outline: '2px solid',\n    outlineOffset: '2px',\n  },\n});\n\ninterface InteractiveLinkProps {\n  children: React.ReactNode;\n  href: string;\n  className?: any;\n}\nconst InteractiveLink: React.VFC<InteractiveLinkProps> = (props) => {\n  return (\n    <Interactive\n      {...props}\n      className={props.className.toString()}\n      as=\"a\"\n      hover={{ className: 'hover' }}\n      active=\"hover\"\n      focusFromTab={{\n        className: 'focusFromTab',\n        style: {\n          outline: null,\n          outlineOffset: null,\n        },\n      }}\n      touchActiveTapOnly\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    />\n  );\n};\n\nexport const StyledInteractiveLink = styled(InteractiveLink, {\n  color: '$highContrast',\n  borderBottom: '2px dotted $green',\n  textDecoration: 'none',\n\n  '&.hover': {\n    borderBottomStyle: 'solid',\n  },\n\n  '&.focusFromTab': {\n    // have separate outlineColor b/c tokens don't work in outline shorthand\n    // https://github.com/modulz/stitches/issues/103\n    outlineColor: '$green',\n    outline: '2px solid',\n    outlineOffset: '2px',\n  },\n\n  variants: {\n    type: {\n      lowContrast: {\n        color: '$lowContrast',\n        fontSize: '14px',\n        borderBottomWidth: '1px',\n\n        '&.hover': {\n          color: '$highContrast',\n        },\n      },\n    },\n  },\n});\n\ninterface InteractiveButtonProps {\n  children: React.ReactNode;\n  onClick: () => void;\n  className?: any;\n}\nconst InteractiveButton: React.VFC<InteractiveButtonProps> = (props) => {\n  return (\n    <Interactive\n      {...props}\n      className={props.className.toString()}\n      as=\"div\"\n      hover={{ className: 'hover' }}\n      active=\"hover\"\n      focusFromTab={{\n        className: 'focusFromTab',\n        style: {\n          outline: null,\n          outlineOffset: null,\n        },\n      }}\n      touchActiveTapOnly\n    />\n  );\n};\n\nexport const StyledInteractiveButton = styled(InteractiveButton, {\n  color: '$highContrast',\n  border: '2px solid $highContrast',\n  width: '100%',\n  height: '42px',\n  lineHeight: '36px',\n  fontSize: '18px',\n  textAlign: 'center',\n  margin: '25px 0',\n  userSelect: 'none',\n\n  '&.hover': {\n    color: '$green',\n    borderColor: '$green',\n  },\n\n  '&.focusFromTab': {\n    // have separate outlineColor b/c tokens don't work in outline shorthand\n    // https://github.com/modulz/stitches/issues/103\n    outlineColor: '$green',\n    outline: '2px solid',\n    outlineOffset: '2px',\n  },\n});\n","import React, { useState, useMemo } from 'react';\nimport { eventFrom, EventFrom } from 'event-from';\n\nexport type EventCategory =\n  | 'click'\n  | 'mouse'\n  | 'pointer'\n  | 'touch'\n  | 'key'\n  | 'focus'\n  | 'drag'\n  | 'wheel'\n  | 'scroll'\n  | 'select'\n  | 'contextMenu';\n\nconst listOfEventListenerTypes: {\n  propName: string;\n  category: EventCategory;\n}[] = [\n  // click events\n  { propName: 'onClick', category: 'click' },\n  { propName: 'onDoubleClick', category: 'click' },\n  // pointer events\n  { propName: 'onPointerEnter', category: 'pointer' },\n  { propName: 'onPointerLeave', category: 'pointer' },\n  { propName: 'onPointerOver', category: 'pointer' },\n  { propName: 'onPointerOut', category: 'pointer' },\n  { propName: 'onPointerDown', category: 'pointer' },\n  { propName: 'onPointerUp', category: 'pointer' },\n  { propName: 'onPointerMove', category: 'pointer' },\n  { propName: 'onGotPointerCapture', category: 'pointer' },\n  { propName: 'onLostPointerCapture', category: 'pointer' },\n  { propName: 'onPointerCancel', category: 'pointer' },\n  // mouse events\n  { propName: 'onMouseEnter', category: 'mouse' },\n  { propName: 'onMouseLeave', category: 'mouse' },\n  { propName: 'onMouseOver', category: 'mouse' },\n  { propName: 'onMouseOut', category: 'mouse' },\n  { propName: 'onMouseDown', category: 'mouse' },\n  { propName: 'onMouseUp', category: 'mouse' },\n  { propName: 'onMouseMove', category: 'mouse' },\n  // touch events\n  { propName: 'onTouchStart', category: 'touch' },\n  { propName: 'onTouchMove', category: 'touch' },\n  { propName: 'onTouchEnd', category: 'touch' },\n  { propName: 'onTouchCancel', category: 'touch' },\n  // key events\n  { propName: 'onKeyDown', category: 'key' },\n  { propName: 'onKeyUp', category: 'key' },\n  // focus events\n  { propName: 'onFocus', category: 'focus' },\n  { propName: 'onBlur', category: 'focus' },\n  // drag events\n  { propName: 'onDragStart', category: 'drag' },\n  { propName: 'onDrag', category: 'drag' },\n  { propName: 'onDragEnd', category: 'drag' },\n  // wheel and scroll events not fully supported by eventFrom\n  // // wheel event\n  // { propName: 'onWheel', category: 'wheel' },\n  // // scroll event\n  // { propName: 'onScroll', category: 'scroll' },\n  // select event\n  { propName: 'onSelect', category: 'select' },\n  // context menu\n  { propName: 'onContextMenu', category: 'contextMenu' },\n];\n\ninterface FindIndexOfRecentEventOfSameType {\n  (arg: {\n    eventLog: EventLogItem[];\n    type: string;\n    eventFrom: EventFrom;\n    nowTime: number;\n    recentTimeCutoff: number;\n  }): number | undefined;\n}\n\nconst findIndexOfRecentEventOfSameType: FindIndexOfRecentEventOfSameType = ({\n  eventLog,\n  type,\n  eventFrom,\n  nowTime,\n  recentTimeCutoff,\n}) => {\n  for (\n    let i = eventLog.length - 1;\n    i >= Math.max(eventLog.length - 2, 0);\n    i--\n  ) {\n    const e = eventLog[i];\n    const eventTime = e.lastEventTime || e.time;\n\n    if (\n      e.type === type &&\n      e.eventFrom === eventFrom &&\n      eventTime &&\n      nowTime - eventTime <= recentTimeCutoff\n    )\n      return i;\n  }\n};\n\ninterface CalculateTimeSincePreviousEvent {\n  (arg: { eventLog: EventLogItem[]; nowTime: number; eventType?: string }):\n    | number\n    | undefined;\n}\n\nconst calculateTimeSincePreviousEvent: CalculateTimeSincePreviousEvent = ({\n  eventLog,\n  nowTime,\n  eventType,\n}) => {\n  for (let i = eventLog.length - 1; i >= 0; i--) {\n    if (eventType && eventType !== eventLog[i].type) {\n      continue;\n    }\n    const eventTime = eventLog[i].lastEventTime || eventLog[i].time;\n    if (eventTime !== undefined) {\n      return nowTime - eventTime;\n    }\n  }\n  return undefined;\n};\n\nexport interface EventLogItem {\n  category: EventCategory;\n  type: string;\n  eventFrom: EventFrom;\n  time?: number;\n  lastEventTime?: number; // used when counting multiple events of the same time, e.g. mousemove\n  timeSincePreviousEvent?: number;\n  timeSincePreviousPointerdown?: number;\n  xCoordinate?: number;\n  yCoordinate?: number;\n  target?: any;\n  count?: number;\n}\n\ninterface EventListener {\n  [key: string]: React.EventHandler<any>;\n}\n\ninterface UseEventLog {\n  (options: {\n    setMoveListeners?: boolean;\n    preventDefaultOnAll: boolean;\n    contextMenuPreventDefault: boolean;\n    consoleLogEvents: boolean;\n  }): {\n    eventLog: EventLogItem[];\n    eventListeners: EventListener;\n  };\n}\n\nexport const useEventLog: UseEventLog = ({\n  setMoveListeners,\n  preventDefaultOnAll,\n  contextMenuPreventDefault,\n  consoleLogEvents,\n}) => {\n  const [eventLog, updateEventLog] = useState<EventLogItem[]>([]);\n\n  const eventListeners = useMemo(\n    () =>\n      listOfEventListenerTypes.reduce(\n        (eventListenersReduceObj: EventListener, listenerType) => {\n          if (\n            !setMoveListeners &&\n            /move/.test(listenerType.propName.toLowerCase())\n          ) {\n            return eventListenersReduceObj;\n          }\n\n          eventListenersReduceObj[listenerType.propName] = (event) => {\n            const eventFromResult = eventFrom(event);\n            const nowTime = Date.now();\n\n            if (\n              preventDefaultOnAll ||\n              (contextMenuPreventDefault && event.type === 'contextmenu')\n            ) {\n              event.preventDefault();\n            }\n\n            if (consoleLogEvents) {\n              console.log(event, `eventFrom: ${eventFromResult}`);\n            }\n\n            updateEventLog((prevState) => {\n              const newState = [...prevState];\n              const recentEventOfSameTypeIdx = findIndexOfRecentEventOfSameType(\n                {\n                  eventLog: newState,\n                  type: event.type,\n                  eventFrom: eventFromResult,\n                  nowTime,\n                  recentTimeCutoff: 1000,\n                },\n              );\n\n              if (\n                [\n                  'click',\n                  'mousemove',\n                  'pointermove',\n                  'touchmove',\n                  'keydown',\n                  'keyup',\n                  'drag',\n                  'scroll',\n                  'wheel',\n                ].includes(event.type) &&\n                recentEventOfSameTypeIdx !== undefined\n              ) {\n                const recentEvent = newState[recentEventOfSameTypeIdx];\n                const newCount = recentEvent.count ? recentEvent.count + 1 : 2;\n                newState[recentEventOfSameTypeIdx] = {\n                  category: listenerType.category,\n                  type: event.type,\n                  eventFrom: eventFromResult,\n                  time: recentEvent.time,\n                  lastEventTime: nowTime,\n                  timeSincePreviousEvent: recentEvent.timeSincePreviousEvent,\n                  timeSincePreviousPointerdown:\n                    recentEvent.timeSincePreviousPointerdown,\n                  xCoordinate: Math.round(event.clientX),\n                  yCoordinate: Math.round(event.clientY),\n                  target: event.target,\n                  count: newCount,\n                };\n              } else {\n                newState.push({\n                  category: listenerType.category,\n                  type: event.type,\n                  eventFrom: eventFromResult,\n                  time: nowTime,\n                  timeSincePreviousEvent: calculateTimeSincePreviousEvent({\n                    eventLog: newState,\n                    nowTime,\n                  }),\n                  timeSincePreviousPointerdown: calculateTimeSincePreviousEvent(\n                    {\n                      eventLog: newState,\n                      eventType: 'pointerdown',\n                      nowTime,\n                    },\n                  ),\n                  xCoordinate: Math.round(event.clientX),\n                  yCoordinate: Math.round(event.clientY),\n                  target: event.target,\n                });\n              }\n\n              return newState;\n            });\n          };\n          return eventListenersReduceObj;\n        },\n        {},\n      ),\n    [\n      setMoveListeners,\n      preventDefaultOnAll,\n      contextMenuPreventDefault,\n      consoleLogEvents,\n    ],\n  );\n\n  return { eventLog, eventListeners };\n};\n","import { useEffect, useRef } from 'react';\nimport { EventLogItem } from './useEventLog';\nimport { EventCategory } from './useEventLog';\nimport { styled } from './stitches.config';\n\nconst EventLogContainer = styled('div', {\n  height: '300px',\n  padding: '0 5px',\n  border: '1px solid $highContrast',\n  overflow: 'scroll',\n});\n\nconst EventLogLine = styled('code', {\n  display: 'block',\n  variants: {\n    spaceAbove: {\n      true: {\n        marginTop: '20px',\n      },\n    },\n  },\n});\n\nconst InfoType = styled('span', {\n  variants: {\n    type: {\n      click: { color: '$blue' },\n      pointer: { color: '$green' },\n      mouse: { color: '$purple' },\n      touch: { color: '$orange' },\n      key: { color: '$yellow' },\n      focus: { color: '$blueGreen' },\n      cancel: { color: '$red' },\n      lowContrast: { color: '$lowContrast' },\n    },\n  },\n});\n\nconst determineInfoType = (category: EventCategory, type: string) => {\n  if (type === 'pointercancel' || type === 'touchcancel') return 'cancel';\n  switch (category) {\n    case 'click':\n      return category;\n    case 'pointer':\n      return category;\n    case 'mouse':\n      return category;\n    case 'touch':\n      return category;\n    case 'key':\n      return category;\n    case 'focus':\n      return category;\n    default:\n      return undefined;\n  }\n};\n\ninterface EventLogUIProps {\n  eventLog: EventLogItem[];\n  showTimeSincePreviousEvent: boolean;\n  showTimeSincePreviousPointerdown: boolean;\n  showEventCoordinates: boolean;\n  showPointerEvents: boolean;\n  showMouseEvents: boolean;\n  showTouchEvents: boolean;\n  height?: string;\n}\n\nexport const EventLogUI: React.VFC<EventLogUIProps> = ({\n  eventLog,\n  showTimeSincePreviousEvent,\n  showTimeSincePreviousPointerdown,\n  showEventCoordinates,\n  showPointerEvents,\n  showMouseEvents,\n  showTouchEvents,\n  height,\n}) => {\n  const eventLogEl = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (eventLogEl && eventLogEl.current) {\n      eventLogEl.current.scrollTop = eventLogEl.current.scrollHeight;\n    }\n  });\n\n  const eventsToExclude: string[] = [];\n  if (!showPointerEvents) eventsToExclude.push('pointer');\n  if (!showMouseEvents) eventsToExclude.push('mouse');\n  if (!showTouchEvents) eventsToExclude.push('touch');\n\n  return (\n    <EventLogContainer ref={eventLogEl} css={{ height }}>\n      {eventLog.map(\n        (\n          {\n            category,\n            type,\n            count,\n            eventFrom,\n            time,\n            timeSincePreviousEvent,\n            timeSincePreviousPointerdown,\n            xCoordinate,\n            yCoordinate,\n          },\n          idx,\n          arr,\n        ) =>\n          eventsToExclude.includes(category) ? null : (\n            <EventLogLine\n              key={`${idx}${type}${count}`}\n              spaceAbove={\n                timeSincePreviousEvent !== undefined &&\n                timeSincePreviousEvent > 1000\n              }\n            >\n              <InfoType type=\"lowContrast\">{idx}</InfoType>{' '}\n              <InfoType type={determineInfoType(category, type)}>\n                {type}\n                {count ? ` (${count})` : ''}\n              </InfoType>{' '}\n              eventFrom <InfoType type={eventFrom}>{eventFrom}</InfoType>\n              {showTimeSincePreviousEvent &&\n                timeSincePreviousEvent !== undefined && (\n                  <span>, {timeSincePreviousEvent}ms</span>\n                )}\n              {showTimeSincePreviousPointerdown &&\n                timeSincePreviousPointerdown !== undefined && (\n                  <span>, {timeSincePreviousPointerdown}ms_pointerdown</span>\n                )}\n              {showEventCoordinates && (\n                <span>\n                  , x:{xCoordinate}, y:{yCoordinate}\n                </span>\n              )}\n            </EventLogLine>\n          ),\n      )}\n    </EventLogContainer>\n  );\n};\n","import { useMemo } from 'react';\nimport { styled } from './stitches.config';\n\nimport { useEventLog } from './useEventLog';\nimport { EventLogUI } from './EventLogUI';\nimport { DemoOptionsInterface } from './App';\n\nconst DemoContainer = styled('div', {\n  paddingBottom: '20px',\n  margin: '20px 0',\n  borderBottom: '1px dotted $lowContrast',\n});\n\nconst TestButton = styled('button', {\n  display: 'block',\n  width: '100%',\n  height: '70px',\n  margin: '10px 0',\n  fontSize: '24px',\n  textAlign: 'center',\n  color: '$highContrast',\n  border: '1px solid $highContrast',\n  ':hover, &:active': {\n    color: '$green',\n    borderColor: '$green',\n  },\n  ':focus': {\n    outlineColor: '$green',\n    outline: '2px solid',\n    outlineOffset: '2px',\n  },\n});\n\nconst TestLinkContainer = styled('div', {\n  margin: '10px 0',\n});\n\nconst TestLink = styled('a', {\n  fontSize: '24px',\n  ':hover, &:active': {\n    color: '$green',\n    borderColor: '$green',\n  },\n  ':focus': {\n    outlineColor: '$green',\n    outline: '2px solid',\n    outlineOffset: '2px',\n  },\n});\n\nconst ScrollableContainer = styled('div', {\n  margin: '10px 0',\n  height: '100px',\n  padding: '0 5px',\n  border: '1px solid $highContrast',\n  overflow: 'scroll',\n});\n\nconst ScrollableItem = styled('div', {\n  pointerEvents: 'none',\n});\n\nconst FormHeader = styled('h3', {\n  fontSize: '14px',\n  margin: '12px 0 2px',\n  color: '$lowContrast',\n});\n\nconst TextInput = styled('input', {\n  width: '100%',\n  fontSize: '24px',\n  border: '1px solid $highContrast',\n  padding: '2px 4px',\n  ':hover, &:active': {\n    color: '$green',\n    borderColor: '$green',\n  },\n  ':focus': {\n    outlineColor: '$green',\n    outline: '2px solid',\n    outlineOffset: '-1px',\n  },\n});\n\nconst SubmitInput = styled('input', {\n  display: 'block',\n  width: '100%',\n  height: '44px',\n  margin: '10px 0',\n  fontSize: '24px',\n  textAlign: 'center',\n  color: '$highContrast',\n  border: '1px solid $highContrast',\n  ':hover, &:active': {\n    color: '$green',\n    borderColor: '$green',\n  },\n  ':focus': {\n    outlineColor: '$green',\n    outline: '2px solid',\n    outlineOffset: '2px',\n  },\n});\n\nexport const ButtonDemo: React.VFC<DemoOptionsInterface> = ({\n  setMoveListeners,\n  preventDefaultOnAll,\n  touchActionNone,\n  webkitTapHighlightColorTransparent,\n  // userSelectNone,\n  webkitTouchCalloutNone,\n  contextMenuPreventDefault,\n  // draggableFalse,\n  showTimeSincePreviousEvent,\n  showEventCoordinates,\n  showPointerEvents,\n  showMouseEvents,\n  showTouchEvents,\n  showTimeSincePreviousPointerdown,\n  consoleLogEvents,\n}) => {\n  const { eventLog, eventListeners } = useEventLog({\n    setMoveListeners,\n    preventDefaultOnAll,\n    contextMenuPreventDefault,\n    consoleLogEvents,\n  });\n  return (\n    <DemoContainer id=\"button-demo\">\n      <TestButton\n        {...eventListeners}\n        css={{\n          touchAction: touchActionNone ? 'none' : undefined,\n          WebkitTapHighlightColor: webkitTapHighlightColorTransparent\n            ? 'transparent'\n            : undefined,\n          WebkitTouchCallout: webkitTouchCalloutNone ? 'none' : undefined,\n        }}\n      >\n        Test Button\n      </TestButton>\n      <EventLogUI\n        eventLog={eventLog}\n        showTimeSincePreviousEvent={showTimeSincePreviousEvent}\n        showTimeSincePreviousPointerdown={showTimeSincePreviousPointerdown}\n        showEventCoordinates={showEventCoordinates}\n        showPointerEvents={showPointerEvents}\n        showMouseEvents={showMouseEvents}\n        showTouchEvents={showTouchEvents}\n      />\n    </DemoContainer>\n  );\n};\n\nexport const LinkDemo: React.VFC<DemoOptionsInterface> = ({\n  setMoveListeners,\n  preventDefaultOnAll,\n  touchActionNone,\n  webkitTapHighlightColorTransparent,\n  // userSelectNone,\n  webkitTouchCalloutNone,\n  contextMenuPreventDefault,\n  draggableFalse,\n  showTimeSincePreviousEvent,\n  showEventCoordinates,\n  showPointerEvents,\n  showMouseEvents,\n  showTouchEvents,\n  showTimeSincePreviousPointerdown,\n  consoleLogEvents,\n}) => {\n  const { eventLog, eventListeners } = useEventLog({\n    setMoveListeners,\n    preventDefaultOnAll,\n    contextMenuPreventDefault,\n    consoleLogEvents,\n  });\n  return (\n    <DemoContainer id=\"link-demo\">\n      <TestLinkContainer>\n        <TestLink\n          {...eventListeners}\n          href=\"#link-demo\"\n          draggable={draggableFalse ? false : undefined}\n          css={{\n            touchAction: touchActionNone ? 'none' : undefined,\n            WebkitTapHighlightColor: webkitTapHighlightColorTransparent\n              ? 'transparent'\n              : undefined,\n            WebkitTouchCallout: webkitTouchCalloutNone ? 'none' : undefined,\n          }}\n        >\n          Test link with href=\"#link-demo\"\n        </TestLink>\n      </TestLinkContainer>\n      <EventLogUI\n        eventLog={eventLog}\n        showTimeSincePreviousEvent={showTimeSincePreviousEvent}\n        showTimeSincePreviousPointerdown={showTimeSincePreviousPointerdown}\n        showEventCoordinates={showEventCoordinates}\n        showPointerEvents={showPointerEvents}\n        showMouseEvents={showMouseEvents}\n        showTouchEvents={showTouchEvents}\n      />\n    </DemoContainer>\n  );\n};\n\nexport const ScrollableDemo: React.VFC<DemoOptionsInterface> = ({\n  setMoveListeners,\n  preventDefaultOnAll,\n  touchActionNone,\n  webkitTapHighlightColorTransparent,\n  // userSelectNone,\n  webkitTouchCalloutNone,\n  contextMenuPreventDefault,\n  // draggableFalse,\n  showTimeSincePreviousEvent,\n  showEventCoordinates,\n  showPointerEvents,\n  showMouseEvents,\n  showTouchEvents,\n  showTimeSincePreviousPointerdown,\n  consoleLogEvents,\n}) => {\n  const { eventLog, eventListeners } = useEventLog({\n    setMoveListeners,\n    preventDefaultOnAll,\n    contextMenuPreventDefault,\n    consoleLogEvents,\n  });\n  return (\n    <DemoContainer id=\"scrollable-demo\">\n      <ScrollableContainer\n        {...eventListeners}\n        css={{\n          touchAction: touchActionNone ? 'none' : undefined,\n          WebkitTapHighlightColor: webkitTapHighlightColorTransparent\n            ? 'transparent'\n            : undefined,\n          WebkitTouchCallout: webkitTouchCalloutNone ? 'none' : undefined,\n        }}\n      >\n        {useMemo(\n          () =>\n            Array(100)\n              .fill(1)\n              .map((_, idx) => (\n                <ScrollableItem key={idx}>{idx} scroll me</ScrollableItem>\n              )),\n          [],\n        )}\n      </ScrollableContainer>\n      <EventLogUI\n        eventLog={eventLog}\n        showTimeSincePreviousEvent={showTimeSincePreviousEvent}\n        showTimeSincePreviousPointerdown={showTimeSincePreviousPointerdown}\n        showEventCoordinates={showEventCoordinates}\n        showPointerEvents={showPointerEvents}\n        showMouseEvents={showMouseEvents}\n        showTouchEvents={showTouchEvents}\n      />\n    </DemoContainer>\n  );\n};\n\nexport const FormDemo: React.VFC<DemoOptionsInterface> = ({\n  setMoveListeners,\n  preventDefaultOnAll,\n  touchActionNone,\n  webkitTapHighlightColorTransparent,\n  // userSelectNone,\n  webkitTouchCalloutNone,\n  contextMenuPreventDefault,\n  // draggableFalse,\n  showTimeSincePreviousEvent,\n  showEventCoordinates,\n  showPointerEvents,\n  showMouseEvents,\n  showTouchEvents,\n  showTimeSincePreviousPointerdown,\n  consoleLogEvents,\n}) => {\n  const textInput = useEventLog({\n    setMoveListeners,\n    preventDefaultOnAll,\n    contextMenuPreventDefault,\n    consoleLogEvents,\n  });\n  const submitInput = useEventLog({\n    setMoveListeners,\n    preventDefaultOnAll,\n    contextMenuPreventDefault,\n    consoleLogEvents,\n  });\n  return (\n    <DemoContainer id=\"form-demo\">\n      <form onSubmit={(e) => e.preventDefault()}>\n        <TextInput\n          {...textInput.eventListeners}\n          type=\"text\"\n          placeholder=\"Form demo\"\n          css={{\n            touchAction: touchActionNone ? 'none' : undefined,\n            WebkitTapHighlightColor: webkitTapHighlightColorTransparent\n              ? 'transparent'\n              : undefined,\n            WebkitTouchCallout: webkitTouchCalloutNone ? 'none' : undefined,\n          }}\n        />\n        <SubmitInput\n          {...submitInput.eventListeners}\n          type=\"submit\"\n          value=\"Submit\"\n          css={{\n            touchAction: touchActionNone ? 'none' : undefined,\n            WebkitTapHighlightColor: webkitTapHighlightColorTransparent\n              ? 'transparent'\n              : undefined,\n            WebkitTouchCallout: webkitTouchCalloutNone ? 'none' : undefined,\n          }}\n        />\n      </form>\n      <FormHeader>Text input event log</FormHeader>\n      <EventLogUI\n        eventLog={textInput.eventLog}\n        height=\"150px\"\n        showTimeSincePreviousEvent={showTimeSincePreviousEvent}\n        showTimeSincePreviousPointerdown={showTimeSincePreviousPointerdown}\n        showEventCoordinates={showEventCoordinates}\n        showPointerEvents={showPointerEvents}\n        showMouseEvents={showMouseEvents}\n        showTouchEvents={showTouchEvents}\n      />\n      <FormHeader>Submit input event log</FormHeader>\n      <EventLogUI\n        eventLog={submitInput.eventLog}\n        height=\"150px\"\n        showTimeSincePreviousEvent={showTimeSincePreviousEvent}\n        showTimeSincePreviousPointerdown={showTimeSincePreviousPointerdown}\n        showEventCoordinates={showEventCoordinates}\n        showPointerEvents={showPointerEvents}\n        showMouseEvents={showMouseEvents}\n        showTouchEvents={showTouchEvents}\n      />\n    </DemoContainer>\n  );\n};\n","import { useState, useMemo } from 'react';\nimport useDarkMode from 'use-dark-mode';\nimport { styled, globalStyles, darkThemeClass } from './stitches.config';\nimport { StyledInteractiveLink, StyledDarkModeToggle } from './Interactive';\nimport {\n  ButtonDemo,\n  LinkDemo,\n  // ScrollableDemo,\n  FormDemo,\n} from './Demos';\n\nconst AppDiv = styled('div', {\n  maxWidth: '700px',\n  padding: '14px 15px 25px',\n  margin: '0 auto',\n});\n\nconst H1 = styled('h1', {\n  fontSize: '26px',\n  display: 'flex',\n  justifyContent: 'space-between',\n  marginBottom: '2px',\n});\n\nconst InfoP = styled('p', {\n  padding: '10px 0',\n  borderBottom: '1px dotted $lowContrast',\n});\n\nconst DemoOptionsContainer = styled('div', {\n  borderBottom: '1px dotted $lowContrast',\n});\n\nconst DemoOptionsButton = styled('button', {\n  cursor: 'pointer',\n  WebkitTapHighlightColor: 'transparent',\n  display: 'block',\n  margin: '10px 0',\n  fontSize: '20px',\n  color: '$highContrast',\n  ':hover, &:active': {\n    color: '$green',\n    borderColor: '$green',\n  },\n  ':focus': {\n    outlineColor: '$green',\n    outline: '2px solid',\n    outlineOffset: '2px',\n  },\n});\n\nconst OptionsContainer = styled('div', {\n  paddingBottom: '6px',\n});\n\nconst OptionSectionHeading = styled('div', {\n  margin: '14px 0 6px',\n});\n\nconst OptionItemContainer = styled('div', {\n  margin: '4px 0',\n});\n\nconst StyledLabel = styled('label', {\n  cursor: 'pointer',\n  WebkitTapHighlightColor: 'transparent',\n});\n\nconst StyledCheckbox = styled('input', {\n  appearance: 'checkbox',\n  verticalAlign: 'middle',\n  marginRight: '4px',\n  ':focus': {\n    outlineColor: '$green',\n    outline: '2px solid',\n    outlineOffset: '1px',\n  },\n});\n\ninterface OptionItemCheckboxProps {\n  label: React.ReactNode;\n  checked: boolean;\n  update: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst OptionItemCheckbox: React.VFC<OptionItemCheckboxProps> = ({\n  label,\n  checked,\n  update,\n}) => (\n  <OptionItemContainer>\n    <StyledLabel>\n      <StyledCheckbox\n        type=\"checkbox\"\n        checked={checked}\n        onChange={() => update((prevState) => !prevState)}\n      />\n      {label}\n    </StyledLabel>\n  </OptionItemContainer>\n);\n\nexport interface DemoOptionsInterface {\n  setMoveListeners: boolean;\n  preventDefaultOnAll: boolean;\n  touchActionNone: boolean;\n  webkitTapHighlightColorTransparent: boolean;\n  userSelectNone: boolean;\n  webkitTouchCalloutNone: boolean;\n  contextMenuPreventDefault: boolean;\n  draggableFalse: boolean;\n  showTimeSincePreviousEvent: boolean;\n  showEventCoordinates: boolean;\n  showPointerEvents: boolean;\n  showMouseEvents: boolean;\n  showTouchEvents: boolean;\n  showTimeSincePreviousPointerdown: boolean;\n  consoleLogEvents: boolean;\n}\n\nexport const App = () => {\n  globalStyles();\n\n  const darkMode = useDarkMode(undefined, {\n    classNameDark: darkThemeClass,\n  });\n\n  const [showDemoOptions, updateShowDemoOptions] = useState(false);\n\n  // options\n  const [setMoveListeners, updateSetMoveListeners] = useState(true);\n  const [preventDefaultOnAll, updatePreventDefaultOnAll] = useState(false);\n  const [touchActionNone, updateTouchActionNone] = useState(false);\n  const [\n    webkitTapHighlightColorTransparent,\n    updateWebkitTapHighlightColorTransparent,\n  ] = useState(true);\n\n  // options to enable long press on touch devices\n  const [userSelectNone, updateUserSelectNone] = useState(false);\n  const [contextMenuPreventDefault, updateContextMenuPreventDefault] = useState(\n    false,\n  );\n  const [webkitTouchCalloutNone, updateWebkitTouchCalloutNone] = useState(\n    false,\n  );\n  const [draggableFalse, updateDraggableFalse] = useState(false);\n\n  // event log options\n  const [\n    showTimeSincePreviousEvent,\n    updateShowTimeSincePreviousEvent,\n  ] = useState(true);\n  const [\n    showTimeSincePreviousPointerdown,\n    updateShowTimeSincePreviousPointerdown,\n  ] = useState(false);\n  const [showEventCoordinates, updateShowEventCoordinates] = useState(false);\n  const [showPointerEvents, updateShowPointerEvents] = useState(true);\n  const [showMouseEvents, updateShowMouseEvents] = useState(true);\n  const [showTouchEvents, updateShowTouchEvents] = useState(true);\n  const [consoleLogEvents, updateConsoleLogEvents] = useState(false);\n\n  const demoOptions: DemoOptionsInterface = {\n    setMoveListeners,\n    preventDefaultOnAll,\n    touchActionNone,\n    webkitTapHighlightColorTransparent,\n    userSelectNone,\n    webkitTouchCalloutNone,\n    contextMenuPreventDefault,\n    draggableFalse,\n    showTimeSincePreviousEvent,\n    showEventCoordinates,\n    showPointerEvents,\n    showMouseEvents,\n    showTouchEvents,\n    showTimeSincePreviousPointerdown,\n    consoleLogEvents,\n  };\n\n  // set user-select: none on the body when userSelectNone is enabled\n  useMemo(() => {\n    document.body.style.userSelect = userSelectNone ? 'none' : '';\n    document.body.style.webkitUserSelect = userSelectNone ? 'none' : '';\n  }, [userSelectNone]);\n\n  return (\n    <AppDiv>\n      <H1>\n        <span>Event From Demo</span>\n        <StyledDarkModeToggle onClick={darkMode.toggle} />\n      </H1>\n      <StyledInteractiveLink\n        type=\"lowContrast\"\n        href=\"https://github.com/rafgraph/event-from\"\n      >\n        https://github.com/rafgraph/event-from\n      </StyledInteractiveLink>\n      <InfoP>\n        A collection of buttons, links, etc with event listeners and logs to\n        demonstrate <code>eventFrom</code>.\n      </InfoP>\n      <DemoOptionsContainer>\n        <DemoOptionsButton\n          onClick={() => updateShowDemoOptions(!showDemoOptions)}\n        >\n          Demo options - {`${showDemoOptions ? 'hide' : 'show'}`}\n        </DemoOptionsButton>\n        {showDemoOptions && (\n          <OptionsContainer>\n            <OptionItemCheckbox\n              label={\n                <>\n                  Set <code>move</code> event listeners in demo\n                </>\n              }\n              checked={setMoveListeners}\n              update={updateSetMoveListeners}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  Call <code>preventDefault()</code> on all events in demo\n                </>\n              }\n              checked={preventDefaultOnAll}\n              update={updatePreventDefaultOnAll}\n            />\n            <OptionItemCheckbox\n              label={<code>touch-action: none</code>}\n              checked={touchActionNone}\n              update={updateTouchActionNone}\n            />\n            <OptionItemCheckbox\n              label={<code>-webkit-tap-highlight-color: transparent</code>}\n              checked={webkitTapHighlightColorTransparent}\n              update={updateWebkitTapHighlightColorTransparent}\n            />\n            <OptionSectionHeading>\n              Options to enable long press on touch devices:\n            </OptionSectionHeading>\n            <OptionItemCheckbox\n              label={\n                <>\n                  <code>user-select: none</code>, set on the{' '}\n                  <code>{'<body>'}</code>, iOS on long press attempts to select\n                  nearby text even if the target element has set this to{' '}\n                  <code>none</code>, so need to set it on the body.\n                </>\n              }\n              checked={userSelectNone}\n              update={updateUserSelectNone}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  <code>contextmenu</code> event <code>preventDefault()</code>,\n                  to prevent the context menu from appearing on long press of\n                  links.\n                </>\n              }\n              checked={contextMenuPreventDefault}\n              update={updateContextMenuPreventDefault}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  <code>-webkit-touch-callout: none</code>, to prevent the\n                  \"context menu\" from appearing on iOS long press of links\n                  because iOS doesn't support <code>conextmenu</code> events.\n                </>\n              }\n              checked={webkitTouchCalloutNone}\n              update={updateWebkitTouchCalloutNone}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  <code>draggable=\"false\"</code>, to prevent from dragging links\n                  on long press on iPadOS.\n                </>\n              }\n              checked={draggableFalse}\n              update={updateDraggableFalse}\n            />\n            <OptionSectionHeading>Event log options:</OptionSectionHeading>\n            <OptionItemCheckbox\n              label={'show time (ms) since previous event'}\n              checked={showTimeSincePreviousEvent}\n              update={updateShowTimeSincePreviousEvent}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  show time (ms) since previous <code>pointerdown</code> event\n                </>\n              }\n              checked={showTimeSincePreviousPointerdown}\n              update={updateShowTimeSincePreviousPointerdown}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  show event coordinates: <code>clientX</code>,{' '}\n                  <code>clientY</code>\n                </>\n              }\n              checked={showEventCoordinates}\n              update={updateShowEventCoordinates}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  show <code>pointer</code> events\n                </>\n              }\n              checked={showPointerEvents}\n              update={updateShowPointerEvents}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  show <code>mouse</code> events\n                </>\n              }\n              checked={showMouseEvents}\n              update={updateShowMouseEvents}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  show <code>touch</code> events\n                </>\n              }\n              checked={showTouchEvents}\n              update={updateShowTouchEvents}\n            />\n            <OptionItemCheckbox\n              label={\n                <>\n                  <code>console.log</code> all events\n                </>\n              }\n              checked={consoleLogEvents}\n              update={updateConsoleLogEvents}\n            />\n          </OptionsContainer>\n        )}\n      </DemoOptionsContainer>\n\n      <ButtonDemo {...demoOptions} />\n      <LinkDemo {...demoOptions} />\n      {/* scroll events not fully supported by eventFrom */}\n      {/* <ScrollableDemo {...demoOptions} /> */}\n      <FormDemo {...demoOptions} />\n    </AppDiv>\n  );\n};\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}